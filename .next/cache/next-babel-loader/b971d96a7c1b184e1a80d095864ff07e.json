{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\pages\\\\post\\\\[title].js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { MAKE_NOTIFICATION, ASK_QUESTION, SAVE_POST } from '../../src/schemas/mutations';\nimport { GET_POST_TITLES, FIND_POST, Q_AND_A_NOTIFS } from '../../src/schemas/queries';\nimport Link from 'next/link';\nimport Loading from '../../components/Loading';\nimport ppStyle from '../../styles/pages/newPostPage.module.css';\nimport PostImages from '../../components/postPage/PostImages';\nimport PostLinks from '../../components/postPage/PostLinks';\nimport PostQandA from '../../components/postPage/PostQandA';\nimport InputHeader from '../../components/text-field/InputHeader';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport { setCurrentUserSP } from '../../redux/reducers/currentUser';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport { useField, triggerAlert, palletteGenerator } from '../../src/functions/functions';\nimport { bindActionCreators } from 'redux';\nimport { setToken } from '../../redux/reducers/token';\nimport apollo, { apolloClient } from '../../lib/apollo';\nimport { withRouter } from 'next/router';\nimport Layout from '../../components/Layout';\nimport Head from 'next/head';\nconst PostPage = withRouter(props => {\n  const {\n    0: currentPost,\n    1: setCurrentPost\n  } = useState(props.post);\n  const {\n    0: skillExpanded,\n    1: setSkillExpanded\n  } = useState(null);\n  const question = useField('text');\n  const message = useField('text');\n\n  const onJoinError = e => {\n    if (e.message.includes('is longer than the maximum allowed length')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const onQuestionError = e => {\n    if (e.message.includes('is longer than the maximum allowed length')) {\n      triggerAlert('warning', `question$: question of ${question.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const onFollowError = e => {\n    console.log(e);\n  };\n\n  const [followMutation] = useMutation(SAVE_POST, {\n    onError: onFollowError\n  });\n  const [makeNotification] = useMutation(MAKE_NOTIFICATION, {\n    onError: onJoinError\n  });\n  const [askQuestion] = useMutation(ASK_QUESTION, {\n    onError: onQuestionError\n  });\n\n  const handleFollow = async () => {\n    if (!props.token) {\n      triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n    }\n\n    const result = await followMutation({\n      variables: {\n        user: props.currentUser._id,\n        postId: currentPost._id\n      }\n    });\n\n    if (result) {\n      props.setCurrentUserSP(props.currentUser.savedPosts.concat(currentPost));\n      triggerAlert('success', 'followed$: you are now following this post', props.setAlert, props.resetAlert);\n    }\n  };\n\n  const qandaQuery = useQuery(Q_AND_A_NOTIFS, {\n    variables: {\n      title: decodeURIComponent(props.postTitle)\n    }\n  }); // const postQuery = useQuery(FIND_POST, {\n  //     variables: {title: decodeURIComponent(props.postTitle)}\n  // })\n\n  const qandaChangeConditions = () => {\n    const query = qandaQuery.data;\n    const reducer = currentPost;\n    if (!query) return null;\n    if (!query.searchAnsweredQToPost) return null;\n    if (!reducer) return null;\n    if (reducer.qanda) return null;\n    return query.searchAnsweredQToPost;\n  }; // const postChangeConditions = () => {\n  //     const query = postQuery.data\n  //     const reducer = currentPost\n  //     if (!query) return null\n  //     if (!query.findPost) return null\n  //     if (reducer) {\n  //         if (reducer.title === query.findPost.title) return null\n  //     }\n  //     return query.findPost\n  // }\n\n\n  const qanda = qandaChangeConditions(); // const post = postChangeConditions()\n\n  useEffect(() => {\n    if (qanda) {\n      setCurrentPost(_objectSpread(_objectSpread({}, currentPost), {}, {\n        qanda\n      }));\n    } // if (post) {\n    //     setCurrentPost(post)\n    // }\n\n  }, [qanda, setCurrentPost, currentPost]);\n\n  if (!currentPost) {\n    return __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 16\n      }\n    });\n  }\n\n  let cleanedTime = new Date(Number(currentPost.time));\n  cleanedTime = cleanedTime.toString().split(' '); // cleanedTime = cleanedTime.slice(1,4).join(' ') + ' ' + cleanedTime[4].split(':').slice(0,2).join(':')\n\n  cleanedTime = cleanedTime.slice(1, 3).join(' ') + ', ' + cleanedTime[3];\n  let qandaList = currentPost.qanda ? currentPost.qanda.map(i => __jsx(PostQandA, {\n    qanda: i,\n    key: `QandA${i.question}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 68\n    }\n  })) : __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 122\n    }\n  });\n  qandaList = qandaList.length ? qandaList : __jsx(\"div\", {\n    className: ppStyle.qandaText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 48\n    }\n  }, \"no question and answer pairs yet\");\n  const skillsHTML = [];\n  const questionStyle = skillExpanded ? {\n    display: 'none'\n  } : {\n    display: 'block'\n  };\n\n  const handleNotification = async proposedContribution => {\n    if (!props.currentUser) {\n      triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await makeNotification({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentPost.user._id,\n        message: message.fields.value,\n        postId: currentPost._id,\n        proposedContribution\n      }\n    });\n\n    if (result) {\n      setSkillExpanded(null);\n      message.reset();\n      triggerAlert('success', `sent$: (check your answered notifications for the response) request has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  for (const ins in currentPost.skillNames) {\n    const skillName = currentPost.skillNames[ins];\n    const skillFill = currentPost.skillFills[ins];\n    const skillCap = currentPost.skillCapacities[ins];\n    const messageStyle = skillExpanded === skillName ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    };\n    const buttonToShown = skillExpanded === skillName ? __jsx(\"h4\", {\n      onClick: () => setSkillExpanded(null),\n      className: ppStyle.PPSButtonExit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, \"X\") : skillFill < skillCap ? __jsx(\"h4\", {\n      onClick: () => setSkillExpanded(skillName),\n      className: ppStyle.PPSButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, \"join\") : __jsx(\"h4\", {\n      className: ppStyle.PPSButtonDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, \"join\");\n    const skillProposition = Array(currentPost.skillNames.length).fill(0);\n    skillProposition[ins] = 1;\n    skillsHTML.push(__jsx(\"div\", {\n      className: ppStyle.PPSSkill,\n      key: `PPSS${skillName}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: ppStyle.PPSDivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }), __jsx(\"p\", {\n      className: ppStyle.PPSSkillName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, skillName), __jsx(\"div\", {\n      className: ppStyle.PPSSkillSecondary,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      className: ppStyle.PPSSkillInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, skillFill, \"/\", skillCap), buttonToShown), __jsx(\"div\", {\n      className: ppStyle.PPSSkillForm,\n      style: messageStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: ppStyle.PPSTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, __jsx(InputHeader, {\n      inputFor: \"PPS-message\",\n      info: false,\n      title: \"message\",\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    })), __jsx(\"div\", {\n      className: ppStyle.PPSInputContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }, __jsx(\"textarea\", _extends({\n      className: ppStyle.PPSInput,\n      id: \"PPS-message\"\n    }, message.fields, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }))), __jsx(\"div\", {\n      className: ppStyle.PPCSubmitContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, __jsx(\"h4\", {\n      onClick: () => handleNotification(skillProposition),\n      className: ppStyle.PPSBButton,\n      style: {\n        borderColor: currentPost.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 26\n      }\n    }, \"join\")))));\n  }\n\n  const handleQuestion = async () => {\n    if (!props.currentUser) {\n      triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!question.fields.value.length) {\n      triggerAlert('warning', `question$: question field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await askQuestion({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentPost.user._id,\n        postId: currentPost._id,\n        question: question.fields.value\n      }\n    });\n\n    if (result) {\n      question.reset();\n      triggerAlert('success', `sent$: (check your answered notifications for the response) question has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const pallette = palletteGenerator(currentPost.color).colorPallette;\n  const teamHTML = currentPost.team ? currentPost.team.map(un => __jsx(Link, {\n    href: \"/user/username\",\n    as: `/user/${un}`,\n    className: `${ppStyle.PPCUserContainer} neutralize-link`,\n    key: `PT${un}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    className: ppStyle.PPCUserIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    className: \"NM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }, un)))) : null;\n\n  const ModifiedDescription = () => {\n    const spacedDis = currentPost.description.split(' ');\n\n    for (const i in spacedDis) {\n      if (spacedDis[i].includes('https://')) {\n        spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\" rel=\"nofollow\">${spacedDis[i]}</a>`;\n      }\n\n      if (spacedDis[i].includes('http://')) {\n        spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\" rel=\"nofollow\">${spacedDis[i]}</a>`;\n      }\n    }\n\n    const finalDis = spacedDis.join(' ');\n    return __jsx(\"p\", {\n      className: ppStyle.PPCDescription,\n      dangerouslySetInnerHTML: {\n        __html: finalDis\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 16\n      }\n    });\n  };\n\n  const headImage = currentPost.imageLinks.length ? currentPost.imageLinks[0] : 'https://i.imgur.com/6z9eNzV.png';\n\n  const descriptionToShow = () => {\n    const d = currentPost.description;\n    const dSentences = d.split('. ');\n    let dFinal = '';\n\n    for (const sentence of dSentences) {\n      if (dFinal.concat(sentence).length < 155) dFinal = dFinal + '. ' + sentence;else if (dFinal.slice(-3) !== '...') dFinal = dFinal + ' ...';\n    }\n\n    if (dFinal.length < 50) dFinal = d.slice(0, 155) + ' ...';\n    return dFinal;\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 17\n    }\n  }, currentPost.title, \" | Unilous\"), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: headImage,\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 17\n    }\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: descriptionToShow(),\n    key: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"navbar-height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: ppStyle.postPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: ppStyle.PPContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }, __jsx(\"h2\", {\n    className: ppStyle.PPCTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 21\n    }\n  }, currentPost.title), __jsx(\"div\", {\n    className: ppStyle.PPCSubHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/user/[username]\",\n    as: `/user/${encodeURIComponent(currentPost.user.username)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    className: `${ppStyle.PPCUserContainer} neutralize-link`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 29\n    }\n  }, __jsx(\"img\", {\n    className: ppStyle.PPCUserIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 33\n    }\n  }), __jsx(\"p\", {\n    className: \"NM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 33\n    }\n  }, currentPost.user.username))), __jsx(\"p\", {\n    className: ppStyle.PPCTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 25\n    }\n  }, cleanedTime)), __jsx(ModifiedDescription, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 21\n    }\n  }), __jsx(PostImages, {\n    imageLinks: currentPost.imageLinks,\n    color: currentPost.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 21\n    }\n  }), __jsx(PostLinks, {\n    referenceLinks: currentPost.referenceLinks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 21\n    }\n  }), __jsx(\"h3\", {\n    className: ppStyle.PPCTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, \"Q and A\"), __jsx(\"div\", {\n    className: ppStyle.PPCAllQandaContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 21\n    }\n  }, qandaList), __jsx(\"h3\", {\n    className: ppStyle.PPCTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 21\n    }\n  }, \"team\"), __jsx(\"div\", {\n    className: ppStyle.teamInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 21\n    }\n  }, teamHTML.length, \" team members\"), __jsx(\"div\", {\n    className: ppStyle.PPCTeamContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 21\n    }\n  }, teamHTML)), __jsx(FormContainer, {\n    pallette: pallette,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: ppStyle.PPSFollowHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    onClick: () => handleFollow(),\n    className: ppStyle.PPSFollowHeader,\n    style: {\n      borderTop: '2px solid currentPost.color'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 25\n    }\n  }, __jsx(\"svg\", {\n    className: ppStyle.PPCUserIcon,\n    fill: currentPost.color,\n    viewBox: \"0 -28 512.00002 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 29\n    }\n  }, __jsx(\"path\", {\n    d: \"m471.382812 44.578125c-26.503906-28.746094-62.871093-44.578125-102.410156-44.578125-29.554687 0-56.621094 9.34375-80.449218 27.769531-12.023438 9.300781-22.917969 20.679688-32.523438 33.960938-9.601562-13.277344-20.5-24.660157-32.527344-33.960938-23.824218-18.425781-50.890625-27.769531-80.445312-27.769531-39.539063 0-75.910156 15.832031-102.414063 44.578125-26.1875 28.410156-40.613281 67.222656-40.613281 109.292969 0 43.300781 16.136719 82.9375 50.78125 124.742187 30.992188 37.394531 75.535156 75.355469 127.117188 119.3125 17.613281 15.011719 37.578124 32.027344 58.308593 50.152344 5.476563 4.796875 12.503907 7.4375 19.792969 7.4375 7.285156 0 14.316406-2.640625 19.785156-7.429687 20.730469-18.128907 40.707032-35.152344 58.328125-50.171876 51.574219-43.949218 96.117188-81.90625 127.109375-119.304687 34.644532-41.800781 50.777344-81.4375 50.777344-124.742187 0-42.066407-14.425781-80.878907-40.617188-109.289063zm0 0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 156\n    }\n  })), __jsx(\"p\", {\n    className: \"NM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 29\n    }\n  }, \"follow\"))), skillsHTML, __jsx(\"div\", {\n    style: questionStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: ppStyle.PPSDivision,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    className: ppStyle.PPSTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 25\n    }\n  }, __jsx(InputHeader, {\n    inputFor: \"PPS-question\",\n    info: true,\n    title: \"question\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 29\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 33\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 37\n    }\n  }, \"if answered it will be shown on post\")))), __jsx(\"div\", {\n    className: ppStyle.PPSInputContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 25\n    }\n  }, __jsx(\"textarea\", _extends({\n    className: ppStyle.PPSInput,\n    id: \"PPS-question\"\n  }, question.fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 29\n    }\n  }))), __jsx(\"div\", {\n    className: ppStyle.PPCSubmitContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 25\n    }\n  }, __jsx(\"h4\", {\n    onClick: () => handleQuestion(),\n    className: ppStyle.PPSButton,\n    style: {\n      borderColor: currentPost.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 29\n    }\n  }, \"ask\"))))));\n}); // const mapStateToProps = (state) => {\n// \treturn {\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps, \n//     { setAlert, resetAlert, setCurrentUserSP }\n// )(PostPage)\n\nexport async function getStaticPaths() {\n  const titlesQuery = await apolloClient.query({\n    query: GET_POST_TITLES\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const paths = titlesQuery.data.allPosts.map(p => `/post/${encodeURIComponent(p.title)}`);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps(context) {\n  const postQuery = await apolloClient.query({\n    query: FIND_POST,\n    variables: {\n      title: context.params.title\n    }\n  }).catch(err => console.log(err));\n  return {\n    props: {\n      post: postQuery.data.findPost\n    }\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    token: state.token,\n    alertNotif: state.alertNotif\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch),\n    setToken: bindActionCreators(setToken, dispatch),\n    setCurrentUserSP: bindActionCreators(setCurrentUserSP, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/pages/post/[title].js"],"names":["React","useState","useEffect","connect","useQuery","useMutation","MAKE_NOTIFICATION","ASK_QUESTION","SAVE_POST","GET_POST_TITLES","FIND_POST","Q_AND_A_NOTIFS","Link","Loading","ppStyle","PostImages","PostLinks","PostQandA","InputHeader","FormContainer","setCurrentUserSP","setAlert","resetAlert","useField","triggerAlert","palletteGenerator","bindActionCreators","setToken","apollo","apolloClient","withRouter","Layout","Head","PostPage","props","currentPost","setCurrentPost","post","skillExpanded","setSkillExpanded","question","message","onJoinError","e","includes","fields","value","length","onQuestionError","onFollowError","console","log","followMutation","onError","makeNotification","askQuestion","handleFollow","token","result","variables","user","currentUser","_id","postId","savedPosts","concat","qandaQuery","title","decodeURIComponent","postTitle","qandaChangeConditions","query","data","reducer","searchAnsweredQToPost","qanda","cleanedTime","Date","Number","time","toString","split","slice","join","qandaList","map","i","qandaText","skillsHTML","questionStyle","display","handleNotification","proposedContribution","userFromId","userToId","reset","username","ins","skillNames","skillName","skillFill","skillFills","skillCap","skillCapacities","messageStyle","buttonToShown","PPSButtonExit","PPSButton","PPSButtonDisabled","skillProposition","Array","fill","push","PPSSkill","PPSDivision","PPSSkillName","PPSSkillSecondary","PPSSkillInfo","PPSSkillForm","PPSTitle","PPSInputContainer","PPSInput","PPCSubmitContainer","PPSBButton","borderColor","color","handleQuestion","pallette","colorPallette","teamHTML","team","un","PPCUserContainer","PPCUserIcon","ModifiedDescription","spacedDis","description","finalDis","PPCDescription","__html","headImage","imageLinks","descriptionToShow","d","dSentences","dFinal","sentence","postPageContainer","PPContent","PPCTitle","PPCSubHeader","encodeURIComponent","PPCTime","referenceLinks","PPCAllQandaContainer","teamInfo","PPCTeamContainer","PPSFollowHeader","borderTop","margin","getStaticPaths","titlesQuery","then","res","catch","err","paths","allPosts","p","fallback","getStaticProps","context","postQuery","params","findPost","mapStateToProps","state","alertNotif","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { MAKE_NOTIFICATION, ASK_QUESTION, SAVE_POST } from '../../src/schemas/mutations'\r\nimport { GET_POST_TITLES, FIND_POST, Q_AND_A_NOTIFS } from '../../src/schemas/queries'\r\nimport Link from 'next/link'\r\nimport Loading from '../../components/Loading'\r\nimport ppStyle from '../../styles/pages/newPostPage.module.css'\r\nimport PostImages from '../../components/postPage/PostImages'\r\nimport PostLinks from '../../components/postPage/PostLinks'\r\nimport PostQandA from '../../components/postPage/PostQandA'\r\nimport InputHeader from '../../components/text-field/InputHeader'\r\nimport FormContainer from '../../components/text-field/FormContainer'\r\nimport { setCurrentUserSP } from '../../redux/reducers/currentUser'\r\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif'\r\nimport { useField, triggerAlert, palletteGenerator } from '../../src/functions/functions'\r\nimport {bindActionCreators} from 'redux'\r\nimport {setToken} from '../../redux/reducers/token'\r\nimport apollo, {apolloClient} from '../../lib/apollo'\r\nimport {withRouter} from 'next/router'\r\nimport Layout from '../../components/Layout'\r\nimport Head from 'next/head'\r\n\r\nconst PostPage = withRouter((props) => {\r\n    const [currentPost, setCurrentPost] = useState(props.post)\r\n    const [skillExpanded, setSkillExpanded] = useState(null)\r\n    const question = useField('text')\r\n    const message = useField('text')\r\n    const onJoinError = (e) => {\r\n        if (e.message.includes('is longer than the maximum allowed length')) {\r\n            triggerAlert('warning', `message$: message of ${message.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert)\r\n        }\r\n    }\r\n    const onQuestionError = (e) => {\r\n        if (e.message.includes('is longer than the maximum allowed length')) {\r\n            triggerAlert('warning', `question$: question of ${question.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert)\r\n        }\r\n    }\r\n    const onFollowError = (e) => {\r\n        console.log(e)\r\n    }\r\n\r\n    const [followMutation] = useMutation(SAVE_POST, {\r\n        onError: onFollowError\r\n    })\r\n    const [makeNotification] = useMutation(MAKE_NOTIFICATION, {\r\n        onError: onJoinError\r\n    })\r\n    const [askQuestion] = useMutation(ASK_QUESTION, {\r\n        onError: onQuestionError\r\n    })\r\n\r\n    const handleFollow = async () => {\r\n        if (!props.token) {\r\n            triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\r\n        }\r\n        const result = await followMutation({\r\n            variables: {\r\n                user: props.currentUser._id,\r\n                postId: currentPost._id\r\n            }\r\n        })\r\n\r\n        if (result) {\r\n            props.setCurrentUserSP(props.currentUser.savedPosts.concat(currentPost))\r\n            triggerAlert('success', 'followed$: you are now following this post', props.setAlert, props.resetAlert)\r\n        }\r\n    }\r\n    \r\n    const qandaQuery = useQuery(Q_AND_A_NOTIFS, {\r\n        variables: {title: decodeURIComponent(props.postTitle)}\r\n    })\r\n    // const postQuery = useQuery(FIND_POST, {\r\n    //     variables: {title: decodeURIComponent(props.postTitle)}\r\n    // })\r\n    const qandaChangeConditions = () => {\r\n        const query = qandaQuery.data\r\n        const reducer = currentPost\r\n        if (!query) return null\r\n        if (!query.searchAnsweredQToPost) return null\r\n        if (!reducer) return null\r\n        if (reducer.qanda) return null\r\n        return query.searchAnsweredQToPost\r\n    }\r\n    // const postChangeConditions = () => {\r\n    //     const query = postQuery.data\r\n    //     const reducer = currentPost\r\n    //     if (!query) return null\r\n    //     if (!query.findPost) return null\r\n    //     if (reducer) {\r\n    //         if (reducer.title === query.findPost.title) return null\r\n    //     }\r\n    //     return query.findPost\r\n    // }\r\n    const qanda = qandaChangeConditions()\r\n    // const post = postChangeConditions()\r\n    useEffect(() => {\r\n        if (qanda) {\r\n            setCurrentPost({...currentPost, qanda})\r\n        }\r\n        // if (post) {\r\n        //     setCurrentPost(post)\r\n        // }\r\n    }, [qanda, setCurrentPost, currentPost])\r\n    if (!currentPost) {\r\n        return <Loading />\r\n    }\r\n\r\n    let cleanedTime = new Date(Number(currentPost.time))\r\n    cleanedTime = cleanedTime.toString().split(' ')\r\n    // cleanedTime = cleanedTime.slice(1,4).join(' ') + ' ' + cleanedTime[4].split(':').slice(0,2).join(':')\r\n    cleanedTime = cleanedTime.slice(1,3).join(' ') + ', ' + cleanedTime[3]\r\n\r\n    let qandaList = currentPost.qanda ? currentPost.qanda.map(i => <PostQandA qanda={i} key={`QandA${i.question}`} />) : <Loading />\r\n    qandaList = qandaList.length ? qandaList : <div className={ppStyle.qandaText}>no question and answer pairs yet</div>\r\n    const skillsHTML = []\r\n    const questionStyle = skillExpanded ? {display: 'none'} : {display: 'block'}\r\n    const handleNotification = async (proposedContribution) => {\r\n        if (!props.currentUser) {\r\n            triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (!message.fields.value.length) {\r\n            triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        const result = await makeNotification({\r\n            variables: {\r\n                userFromId: props.currentUser._id,\r\n                userToId: currentPost.user._id,\r\n                message: message.fields.value,\r\n                postId: currentPost._id,\r\n                proposedContribution\r\n            }\r\n        })\r\n        if (result) {\r\n            setSkillExpanded(null)\r\n            message.reset()\r\n            triggerAlert('success', `sent$: (check your answered notifications for the response) request has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert)\r\n        }\r\n    }\r\n    for (const ins in currentPost.skillNames) {\r\n        const skillName = currentPost.skillNames[ins]\r\n        const skillFill = currentPost.skillFills[ins]\r\n        const skillCap = currentPost.skillCapacities[ins]\r\n        const messageStyle = skillExpanded === skillName ? {display: 'block'} : {display: 'none'}\r\n        const buttonToShown = skillExpanded === skillName ?\r\n            <h4 onClick={() => setSkillExpanded(null)} className={ppStyle.PPSButtonExit}>X</h4>\r\n            :\r\n            skillFill < skillCap ?\r\n                <h4 onClick={() => setSkillExpanded(skillName)} className={ppStyle.PPSButton}>join</h4>\r\n                :\r\n                <h4 className={ppStyle.PPSButtonDisabled}>join</h4>\r\n\r\n        const skillProposition = Array(currentPost.skillNames.length).fill(0)\r\n        skillProposition[ins] = 1\r\n        skillsHTML.push( \r\n            <div className={ppStyle.PPSSkill} key={`PPSS${skillName}`}>\r\n                <div className={ppStyle.PPSDivision} />\r\n                <p className={ppStyle.PPSSkillName}>{skillName}</p>\r\n                <div className={ppStyle.PPSSkillSecondary}>\r\n                    <p className={ppStyle.PPSSkillInfo}>{skillFill}/{skillCap}</p>\r\n                    {buttonToShown}\r\n                </div>\r\n                <div className={ppStyle.PPSSkillForm} style={messageStyle}>\r\n                    <div className={ppStyle.PPSTitle}>\r\n                        <InputHeader inputFor=\"PPS-message\" info={false} title=\"message\" color=\"white\" />\r\n                    </div>\r\n                    <div className={ppStyle.PPSInputContainer}>\r\n                        <textarea className={ppStyle.PPSInput} id=\"PPS-message\" {...message.fields}></textarea>\r\n                    </div>\r\n                    <div className={ppStyle.PPCSubmitContainer}>\r\n                        {<h4 onClick={() => handleNotification(skillProposition)} className={ppStyle.PPSBButton} style={{borderColor: currentPost.color}}>join</h4>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleQuestion = async () => {\r\n        if (!props.currentUser) {\r\n            triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        if (!question.fields.value.length) {\r\n            triggerAlert('warning', `question$: question field is required`, props.setAlert, props.resetAlert)\r\n            return null\r\n        }\r\n        const result = await askQuestion({\r\n            variables: {\r\n                userFromId: props.currentUser._id,\r\n                userToId: currentPost.user._id,\r\n                postId: currentPost._id,\r\n                question: question.fields.value\r\n            }\r\n        })\r\n        if (result) {\r\n            question.reset()\r\n            triggerAlert('success', `sent$: (check your answered notifications for the response) question has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert)\r\n        }\r\n    }\r\n    const pallette = palletteGenerator(currentPost.color).colorPallette\r\n\r\n    const teamHTML = currentPost.team ? currentPost.team.map(un =>\r\n        <Link href=\"/user/username\" as={`/user/${un}`} className={`${ppStyle.PPCUserContainer} neutralize-link`} key={`PT${un}`}>\r\n            <a>\r\n                <img className={ppStyle.PPCUserIcon} src='/svg/userB.svg' alt=\"user\" />\r\n                <p className=\"NM\">{un}</p>\r\n            </a>\r\n        </Link>\r\n        \r\n    ): null\r\n\r\n    const ModifiedDescription = () => {\r\n        const spacedDis = currentPost.description.split(' ')\r\n        for (const i in spacedDis) {\r\n            if (spacedDis[i].includes('https://')) {\r\n                spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\" rel=\"nofollow\">${spacedDis[i]}</a>`\r\n            }\r\n            if (spacedDis[i].includes('http://')) {\r\n                spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\" rel=\"nofollow\">${spacedDis[i]}</a>`\r\n            }\r\n        }\r\n        const finalDis = spacedDis.join(' ')\r\n        return <p className={ppStyle.PPCDescription} dangerouslySetInnerHTML={{__html: finalDis}} />\r\n    }\r\n    const headImage = currentPost.imageLinks.length ? currentPost.imageLinks[0] : 'https://i.imgur.com/6z9eNzV.png'\r\n    const descriptionToShow = () => {\r\n        const d = currentPost.description\r\n        const dSentences = d.split('. ')\r\n        let dFinal = ''\r\n        for (const sentence of dSentences) {\r\n            if (dFinal.concat(sentence).length < 155) dFinal = dFinal + '. ' + sentence\r\n            else if (dFinal.slice(-3) !== '...') dFinal = dFinal + ' ...'\r\n        }\r\n        if (dFinal.length < 50) dFinal = d.slice(0, 155) + ' ...'\r\n\r\n        return dFinal\r\n    }\r\n    \r\n    return (\r\n        <Layout>\r\n            <Head>\r\n                <title>{currentPost.title} | Unilous</title>\r\n                <meta property=\"og:image\" content={headImage} key=\"title\" />\r\n                <meta name=\"description\" content={descriptionToShow()} key=\"description\"/>\r\n            </Head>\r\n            <div className=\"navbar-height\" />\r\n            <div className={ppStyle.postPageContainer}>\r\n                <div className={ppStyle.PPContent}>\r\n                    <h2 className={ppStyle.PPCTitle}>{currentPost.title}</h2>\r\n                    <div className={ppStyle.PPCSubHeader}>\r\n                        <Link href=\"/user/[username]\" as={`/user/${encodeURIComponent(currentPost.user.username)}`}>\r\n                            <a className={`${ppStyle.PPCUserContainer} neutralize-link`}>\r\n                                <img className={ppStyle.PPCUserIcon} src='/svg/userB.svg' alt=\"user\" />\r\n                                <p className=\"NM\">{currentPost.user.username}</p>\r\n                            </a>\r\n                        </Link>\r\n                        <p className={ppStyle.PPCTime}>{cleanedTime}</p>\r\n                    </div>\r\n                    <ModifiedDescription />\r\n                    <PostImages imageLinks={currentPost.imageLinks} color={currentPost.color} />\r\n                    <PostLinks referenceLinks={currentPost.referenceLinks} />\r\n                    <h3 className={ppStyle.PPCTitle}>Q and A</h3>\r\n                    <div className={ppStyle.PPCAllQandaContainer}>\r\n                        {qandaList}\r\n                    </div>\r\n                    <h3 className={ppStyle.PPCTitle}>team</h3>\r\n                    <div className={ppStyle.teamInfo}>{teamHTML.length} team members</div>\r\n                    <div className={ppStyle.PPCTeamContainer}>\r\n                        {teamHTML}\r\n                    </div>\r\n                </div>\r\n                <FormContainer pallette={pallette}>\r\n                    <div  className={ppStyle.PPSFollowHeader} >\r\n                        <div onClick={() => handleFollow()} className={ppStyle.PPSFollowHeader} style={{borderTop: '2px solid currentPost.color'}}>\r\n                            <svg className={ppStyle.PPCUserIcon} fill={currentPost.color} viewBox=\"0 -28 512.00002 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m471.382812 44.578125c-26.503906-28.746094-62.871093-44.578125-102.410156-44.578125-29.554687 0-56.621094 9.34375-80.449218 27.769531-12.023438 9.300781-22.917969 20.679688-32.523438 33.960938-9.601562-13.277344-20.5-24.660157-32.527344-33.960938-23.824218-18.425781-50.890625-27.769531-80.445312-27.769531-39.539063 0-75.910156 15.832031-102.414063 44.578125-26.1875 28.410156-40.613281 67.222656-40.613281 109.292969 0 43.300781 16.136719 82.9375 50.78125 124.742187 30.992188 37.394531 75.535156 75.355469 127.117188 119.3125 17.613281 15.011719 37.578124 32.027344 58.308593 50.152344 5.476563 4.796875 12.503907 7.4375 19.792969 7.4375 7.285156 0 14.316406-2.640625 19.785156-7.429687 20.730469-18.128907 40.707032-35.152344 58.328125-50.171876 51.574219-43.949218 96.117188-81.90625 127.109375-119.304687 34.644532-41.800781 50.777344-81.4375 50.777344-124.742187 0-42.066407-14.425781-80.878907-40.617188-109.289063zm0 0\"/></svg>\r\n                            <p className=\"NM\">follow</p>\r\n                        </div>\r\n                    </div>\r\n                    {skillsHTML}\r\n                    <div style={questionStyle}>\r\n                        <div className={ppStyle.PPSDivision} />\r\n                        <div className={ppStyle.PPSTitle}>\r\n                            <InputHeader inputFor=\"PPS-question\" info={true} title=\"question\" color=\"white\" >\r\n                                <ul style={{margin: 0}}>\r\n                                    <li>if answered it will be shown on post</li>\r\n                                </ul>\r\n                            </InputHeader>\r\n                        </div>\r\n                        <div className={ppStyle.PPSInputContainer}>\r\n                            <textarea className={ppStyle.PPSInput} id=\"PPS-question\" {...question.fields}></textarea>\r\n                        </div>\r\n                        <div className={ppStyle.PPCSubmitContainer}>\r\n                            <h4 onClick={() => handleQuestion()} className={ppStyle.PPSButton} style={{borderColor: currentPost.color}}>ask</h4>\r\n                        </div>\r\n                    </div>\r\n                </FormContainer>\r\n            </div>\r\n        </Layout>\r\n    )\r\n})\r\n\r\n// const mapStateToProps = (state) => {\r\n// \treturn {\r\n//         currentUser: state.currentUser,\r\n//         token: state.token\r\n// \t}\r\n// }\r\n// export default connect(\r\n//     mapStateToProps, \r\n//     { setAlert, resetAlert, setCurrentUserSP }\r\n// )(PostPage)\r\n\r\nexport async function getStaticPaths() {\r\n    const titlesQuery = await apolloClient.query({query: GET_POST_TITLES}).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    const paths = titlesQuery.data.allPosts.map(p => `/post/${encodeURIComponent(p.title)}`)\r\n    return {\r\n        paths,\r\n        fallback: false\r\n    }\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n    const postQuery = await apolloClient.query({\r\n        query: FIND_POST,\r\n        variables: {title: context.params.title} \r\n    }).catch(err => console.log(err))\r\n    return {\r\n        props: {\r\n            post: postQuery.data.findPost,\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        currentUser: state.currentUser,\r\n        token: state.token,\r\n        alertNotif: state.alertNotif,\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setAlert: bindActionCreators(setAlert, dispatch),\r\n        resetAlert: bindActionCreators(resetAlert, dispatch),\r\n        setToken: bindActionCreators(setToken, dispatch),\r\n        setCurrentUserSP: bindActionCreators(setCurrentUserSP, dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PostPage)"]},"metadata":{},"sourceType":"module"}