{"ast":null,"code":"import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport token from './reducers/token';\nimport currentUser from './reducers/currentUser';\nimport posts from './reducers/posts';\nimport alertNotif from './reducers/alertNotif';\nimport stretchLayout from './reducers/stretchLayout';\nimport eventSearch from './reducers/eventSearch';\n\nconst bindMiddleware = middleware => {\n  if (true) {\n    const {\n      composeWithDevTools\n    } = require('redux-devtools-extension');\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nconst reducers = combineReducers({\n  token,\n  currentUser,\n  posts,\n  alertNotif,\n  stretchLayout,\n  eventSearch\n});\n\nconst store = () => createStore(reducers, bindMiddleware([thunkMiddleware]));\n\nexport default store;","map":{"version":3,"sources":["/home/oliver/Documents/projects/UnilousFE/redux/store.js"],"names":["createStore","applyMiddleware","combineReducers","thunkMiddleware","token","currentUser","posts","alertNotif","stretchLayout","eventSearch","bindMiddleware","middleware","composeWithDevTools","require","reducers","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;AAEA,MAAMC,cAAc,GAAGC,UAAU,IAAI;AACjC,YAA2C;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACX,eAAe,CAAC,GAAGU,UAAJ,CAAhB,CAA1B;AACD;;AACD,SAAOV,eAAe,CAAC,GAAGU,UAAJ,CAAtB;AACD,CANH;;AAQA,MAAMG,QAAQ,GAAGZ,eAAe,CAAC;AAC7BE,EAAAA,KAD6B;AAE7BC,EAAAA,WAF6B;AAG7BC,EAAAA,KAH6B;AAI7BC,EAAAA,UAJ6B;AAK7BC,EAAAA,aAL6B;AAM7BC,EAAAA;AAN6B,CAAD,CAAhC;;AASA,MAAMM,KAAK,GAAG,MAAMf,WAAW,CAACc,QAAD,EAAWJ,cAAc,CAAC,CAACP,eAAD,CAAD,CAAzB,CAA/B;;AAEA,eAAeY,KAAf","sourcesContent":["import { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport token from './reducers/token'\r\nimport currentUser from './reducers/currentUser'\r\nimport posts from './reducers/posts'\r\nimport alertNotif from './reducers/alertNotif'\r\nimport stretchLayout from './reducers/stretchLayout'\r\nimport eventSearch from './reducers/eventSearch'\r\n\r\nconst bindMiddleware = middleware => {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const { composeWithDevTools } = require('redux-devtools-extension')\r\n      return composeWithDevTools(applyMiddleware(...middleware))\r\n    }\r\n    return applyMiddleware(...middleware)\r\n  }\r\n\r\nconst reducers = combineReducers({\r\n    token,\r\n    currentUser,\r\n    posts,\r\n    alertNotif,\r\n    stretchLayout,\r\n    eventSearch,\r\n})\r\n\r\nconst store = () => createStore(reducers, bindMiddleware([thunkMiddleware]))\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}