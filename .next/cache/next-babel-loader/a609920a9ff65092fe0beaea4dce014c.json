{"ast":null,"code":"var _jsxFileName = \"/home/oliver/Documents/projects/UnilousFE/components/user/utilities/UserSP.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { LIST_OF_POSTS } from '../../../src/schemas/queries';\nimport { setCurrentUserSP } from '../../../redux/reducers/currentUser';\nimport PostSmall from '../../post/PostSmall';\nimport Loading from '../../Loading';\n\nconst UserSP = props => {\n  const id_list = props.currentUser.savedPosts.map(p => p._id);\n  const postListQuery = useQuery(LIST_OF_POSTS, {\n    variables: {\n      id_list\n    }\n  });\n\n  const queryConditions = (query, reducer) => {\n    if (!query) return null;\n    if (!query.getListOfPosts) return null;\n    if (!reducer) return query.getListOfPosts;\n    if (reducer && reducer.length > 0 && !reducer[0].title) return query.getListOfPosts;\n    return null;\n  };\n\n  const postList = queryConditions(postListQuery.data, props.currentUser.savedPosts);\n  useEffect(() => {\n    if (postList) {\n      let newPostList = [];\n\n      for (const ind in postList) {\n        newPostList.push(_objectSpread(_objectSpread({}, postList[ind]), {}, {\n          _id: id_list[ind]\n        }));\n      }\n\n      props.setCurrentUserSP(newPostList);\n    }\n  }, [postList, props.setCurrentUserSP, props, id_list]);\n\n  if (props.currentUser.savedPosts.length > 0 && !props.currentUser.savedPosts[0].user) {\n    return __jsx(\"div\", {\n      style: {\n        gridColumn: '1/3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      style: {\n        height: '5vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), __jsx(Loading, {\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  const allSP = props.currentUser.savedPosts.map(p => __jsx(PostSmall, {\n    post: p,\n    user: p.user.username,\n    type: \"saved\",\n    key: `SP${p.title}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 57\n    }\n  }));\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    style: {\n      height: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), allSP);\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCurrentUserSP\n})(UserSP);","map":{"version":3,"sources":["/home/oliver/Documents/projects/UnilousFE/components/user/utilities/UserSP.js"],"names":["React","useEffect","connect","useQuery","LIST_OF_POSTS","setCurrentUserSP","PostSmall","Loading","UserSP","props","id_list","currentUser","savedPosts","map","p","_id","postListQuery","variables","queryConditions","query","reducer","getListOfPosts","length","title","postList","data","newPostList","ind","push","user","gridColumn","height","allSP","username","mapStateToProps","state"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAGA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB,QAAMC,OAAO,GAAGD,KAAK,CAACE,WAAN,CAAkBC,UAAlB,CAA6BC,GAA7B,CAAiCC,CAAC,IAAIA,CAAC,CAACC,GAAxC,CAAhB;AACA,QAAMC,aAAa,GAAGb,QAAQ,CAACC,aAAD,EAAgB;AAC1Ca,IAAAA,SAAS,EAAE;AAACP,MAAAA;AAAD;AAD+B,GAAhB,CAA9B;;AAGA,QAAMQ,eAAe,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACxC,QAAI,CAACD,KAAL,EAAY,OAAO,IAAP;AACZ,QAAI,CAACA,KAAK,CAACE,cAAX,EAA2B,OAAO,IAAP;AAC3B,QAAI,CAACD,OAAL,EAAc,OAAOD,KAAK,CAACE,cAAb;AACd,QAAID,OAAO,IAAIA,OAAO,CAACE,MAAR,GAAiB,CAA5B,IAAiC,CAACF,OAAO,CAAC,CAAD,CAAP,CAAWG,KAAjD,EAAwD,OAAOJ,KAAK,CAACE,cAAb;AACxD,WAAO,IAAP;AACH,GAND;;AAQA,QAAMG,QAAQ,GAAGN,eAAe,CAACF,aAAa,CAACS,IAAf,EAAqBhB,KAAK,CAACE,WAAN,CAAkBC,UAAvC,CAAhC;AACAX,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIuB,QAAJ,EAAc;AACV,UAAIE,WAAW,GAAG,EAAlB;;AACA,WAAK,MAAMC,GAAX,IAAkBH,QAAlB,EAA4B;AACxBE,QAAAA,WAAW,CAACE,IAAZ,iCAAqBJ,QAAQ,CAACG,GAAD,CAA7B;AAAoCZ,UAAAA,GAAG,EAAEL,OAAO,CAACiB,GAAD;AAAhD;AACH;;AACDlB,MAAAA,KAAK,CAACJ,gBAAN,CAAuBqB,WAAvB;AACH;AACJ,GARQ,EAQN,CAACF,QAAD,EAAWf,KAAK,CAACJ,gBAAjB,EAAmCI,KAAnC,EAA0CC,OAA1C,CARM,CAAT;;AAUA,MAAID,KAAK,CAACE,WAAN,CAAkBC,UAAlB,CAA6BU,MAA7B,GAAsC,CAAtC,IAA2C,CAACb,KAAK,CAACE,WAAN,CAAkBC,UAAlB,CAA6B,CAA7B,EAAgCiB,IAAhF,EAAsF;AAClF,WACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,UAAU,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,MAAC,OAAD;AAAS,MAAA,KAAK,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AAED,QAAMC,KAAK,GAAGvB,KAAK,CAACE,WAAN,CAAkBC,UAAlB,CAA6BC,GAA7B,CAAiCC,CAAC,IAAI,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEA,CAAjB;AAAoB,IAAA,IAAI,EAAEA,CAAC,CAACe,IAAF,CAAOI,QAAjC;AAA2C,IAAA,IAAI,EAAC,OAAhD;AAAwD,IAAA,GAAG,EAAG,KAAInB,CAAC,CAACS,KAAM,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAtC,CAAd;AACA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,KAAK,EAAE;AAACQ,MAAAA,MAAM,EAAE;AAAT,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKC,KAFL,CADJ;AAMH,CAxCD;;AA0CA,MAAME,eAAe,GAAIC,KAAD,IAAW;AAClC,SAAO;AACAxB,IAAAA,WAAW,EAAEwB,KAAK,CAACxB;AADnB,GAAP;AAGA,CAJD;;AAKA,eAAeT,OAAO,CAClBgC,eADkB,EAElB;AAAE7B,EAAAA;AAAF,CAFkB,CAAP,CAGbG,MAHa,CAAf","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { LIST_OF_POSTS } from '../../../src/schemas/queries'\r\nimport { setCurrentUserSP } from '../../../redux/reducers/currentUser'\r\nimport PostSmall from '../../post/PostSmall'\r\nimport Loading from '../../Loading'\r\n\r\n\r\nconst UserSP = (props) => {\r\n    const id_list = props.currentUser.savedPosts.map(p => p._id)\r\n    const postListQuery = useQuery(LIST_OF_POSTS, {\r\n        variables: {id_list}\r\n    })\r\n    const queryConditions = (query, reducer) => {\r\n        if (!query) return null\r\n        if (!query.getListOfPosts) return null\r\n        if (!reducer) return query.getListOfPosts\r\n        if (reducer && reducer.length > 0 && !reducer[0].title) return query.getListOfPosts\r\n        return null\r\n    }\r\n\r\n    const postList = queryConditions(postListQuery.data, props.currentUser.savedPosts)\r\n    useEffect(()=> {\r\n        if (postList) {\r\n            let newPostList = []\r\n            for (const ind in postList) {\r\n                newPostList.push({...postList[ind], _id: id_list[ind]})\r\n            }\r\n            props.setCurrentUserSP(newPostList)\r\n        }\r\n    }, [postList, props.setCurrentUserSP, props, id_list])\r\n\r\n    if (props.currentUser.savedPosts.length > 0 && !props.currentUser.savedPosts[0].user) {\r\n        return (\r\n            <div style={{gridColumn: '1/3'}}>\r\n                <div style={{height: '5vh'}}/>\r\n                <Loading color=\"white\" />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const allSP = props.currentUser.savedPosts.map(p => <PostSmall post={p} user={p.user.username} type=\"saved\" key={`SP${p.title}`} />)\r\n    return (\r\n        <div>\r\n            <div style={{height: '10px'}} />\r\n            {allSP}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        currentUser: state.currentUser\r\n\t}\r\n}\r\nexport default connect(\r\n    mapStateToProps,\r\n    { setCurrentUserSP }\r\n)(UserSP)"]},"metadata":{},"sourceType":"module"}