{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _jsxFileName = \"/home/oliver/Documents/projects/UnilousFE/pages/user/username.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { useMutation } from '@apollo/react-hooks';\nimport Head from 'next/head';\nimport { withRouter } from 'next/router';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Layout from '../../components/Layout';\nimport PostSmallList from '../../components/post/PostSmallList';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport ReferenceLink from '../../components/text-field/ReferenceLink';\nimport { palletteGenerator, triggerAlert, useField } from '../../functions/functions';\nimport { resetAlert, setAlert } from '../../redux/reducers/alertNotif';\nimport { MAKE_NOTIFICATION } from '../../schemas/mutations';\nimport UP from '../../styles/pages/userPage.module.css';\nconst UserPage = withRouter(_c = _s(props => {\n  _s();\n\n  const currentUser = props.user;\n  const message = useField('text');\n\n  const onError = e => {\n    const eMessage = e.message;\n\n    if (eMessage.includes('Path `message` (')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n    onError\n  });\n\n  const handleMessage = async () => {\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await sendMessage({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentUser._id,\n        message: message.fields.value\n      }\n    });\n\n    if (result) {\n      message.reset();\n      triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette;\n\n  const descriptionToShow = () => {\n    const amtOfPosts = currentUser.posts.length;\n    let dFinal = `${currentUser.username} `;\n\n    if (amtOfPosts) {\n      if (amtOfPosts === 1) dFinal = dFinal + `has ${amtOfPosts} awesome project that needs a team.`;else dFinal = dFinal + `has ${amtOfPosts} awesome projects that need teams.`;\n    } else dFinal = dFinal + 'is looking fresh and ready to work on a project!';\n\n    return dFinal;\n  };\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, `${currentUser.username} | Unilous user`), __jsx(\"meta\", {\n    name: \"description\",\n    content: descriptionToShow(),\n    key: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: UP.UPContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"navbar-height\",\n    style: {\n      gridColumn: '1/3'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: UP.UPContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: UP.UPTitleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    className: UP.UPTitleIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, currentUser.username)), __jsx(\"h3\", {\n    className: UP.UPTitle,\n    style: {\n      opacity: '0.8'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"profile link\"), __jsx(ReferenceLink, {\n    rl: currentUser.referenceLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"posts\"), __jsx(\"div\", {\n    className: UP.UPPostsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, __jsx(PostSmallList, {\n    posts: props.userPosts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }))), props.currentUser !== currentUser.username && __jsx(FormContainer, {\n    pallette: pallette,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, \"contact \", currentUser.username), __jsx(\"h4\", {\n    className: \"form-title-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"message\"), __jsx(\"div\", {\n    className: \"form-field-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, __jsx(\"textarea\", _extends({\n    className: \"form-field\"\n  }, message.fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }))), __jsx(\"div\", {\n    className: \"form-submit-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, __jsx(\"h4\", {\n    onClick: () => handleMessage(),\n    className: \"form-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"send\")))));\n}, \"p12fcvy4sQmyP36bHeMfZDZ+CBs=\", false, function () {\n  return [useField, useMutation];\n}));\n_c2 = UserPage;\n\nconst mapStateToProps = state => {\n  return {\n    alertNotif: state.alertNotif,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport var __N_SSG = true;\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UserPage$withRouter\");\n$RefreshReg$(_c2, \"UserPage\");","map":{"version":3,"sources":["/home/oliver/Documents/projects/UnilousFE/pages/user/username.js"],"names":["useMutation","Head","withRouter","React","connect","bindActionCreators","Layout","PostSmallList","FormContainer","ReferenceLink","palletteGenerator","triggerAlert","useField","resetAlert","setAlert","MAKE_NOTIFICATION","UP","UserPage","props","currentUser","user","message","onError","e","eMessage","includes","fields","value","length","sendMessage","handleMessage","result","variables","userFromId","_id","userToId","reset","username","pallette","colorPallette","descriptionToShow","amtOfPosts","posts","dFinal","UPContainer","gridColumn","UPContent","UPTitleContainer","UPTitleIcon","UPTitle","opacity","referenceLink","UPPostsContainer","userPosts","mapStateToProps","state","alertNotif","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useMutation } from '@apollo/react-hooks'\nimport Head from 'next/head'\nimport { withRouter } from 'next/router'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport Layout from '../../components/Layout'\nimport PostSmallList from '../../components/post/PostSmallList'\nimport FormContainer from '../../components/text-field/FormContainer'\nimport ReferenceLink from '../../components/text-field/ReferenceLink'\nimport { palletteGenerator, triggerAlert, useField } from '../../functions/functions'\nimport { apolloClient } from '../../lib/apollo'\nimport { resetAlert, setAlert } from '../../redux/reducers/alertNotif'\nimport { MAKE_NOTIFICATION } from '../../schemas/mutations'\nimport { ALL_USERS, FIND_USER, LIST_OF_POSTS } from '../../schemas/queries'\nimport UP from '../../styles/pages/userPage.module.css'\n\nconst UserPage = withRouter((props) => {\n  const currentUser = props.user\n  const message = useField('text')\n  const onError = (e) => {\n    const eMessage = e.message\n    if (eMessage.includes('Path `message` (')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\n    }\n  }\n  const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n    onError\n  })\n  const handleMessage = async () => {\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n      return null\n    }\n    const result = await sendMessage({\n        variables: {\n            userFromId: props.currentUser._id,\n            userToId: currentUser._id,\n            message: message.fields.value,\n        }\n    })\n    if (result) {\n        message.reset()\n        triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\n    }\n  }\n  const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\n  \n  const descriptionToShow = () => {\n    const amtOfPosts = currentUser.posts.length\n    let dFinal = `${currentUser.username} `\n    if (amtOfPosts) {\n      if (amtOfPosts === 1) dFinal = dFinal + `has ${amtOfPosts} awesome project that needs a team.`\n      else dFinal = dFinal + `has ${amtOfPosts} awesome projects that need teams.`\n    }\n    else dFinal = dFinal + 'is looking fresh and ready to work on a project!'\n\n    return dFinal\n  }\n  return (\n    <Layout>\n      <Head>\n        <title>{`${currentUser.username} | Unilous user`}</title>\n        <meta name=\"description\" content={descriptionToShow()} key=\"description\" />\n      </Head>\n      <div className={UP.UPContainer}>\n        <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\n        <div className={UP.UPContent}>\n          <div className={UP.UPTitleContainer}>\n            <img className={UP.UPTitleIcon} src=\"/svg/userB.svg\" alt=\"user\" />\n            <h2 className={UP.UPTitle}>{currentUser.username}</h2>\n          </div>\n          <h3 className={UP.UPTitle} style={{opacity: '0.8'}}>profile link</h3>\n          <ReferenceLink rl={currentUser.referenceLink} />\n          <h2 className={UP.UPTitle}>posts</h2>\n          <div className={UP.UPPostsContainer}>\n            <PostSmallList posts={props.userPosts} />\n          </div>\n        </div>\n        { props.currentUser !== currentUser.username &&\n        <FormContainer pallette={pallette} >\n              <h3 className=\"form-title\">contact {currentUser.username}</h3>\n              <h4 className=\"form-title-secondary\">message</h4>\n              <div className=\"form-field-container\">\n                <textarea className=\"form-field\" {...message.fields} />\n              </div >\n              <div className=\"form-submit-button-container\">\n                \n              <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\n              </div>\n        </FormContainer>\n        }\n      </div>\n    </Layout>\n  )\n})\n\nexport async function getStaticPaths() {\n    const usernamesQuery = await apolloClient.query({query: ALL_USERS}).then((res) => {\n        return res\n    }).catch(err => console.log(err))\n    const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`)\n    return {\n        paths,\n        fallback: false\n    }\n}\n\nexport async function getStaticProps({params}) {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {username: params.username}\n  }).catch(err => console.log(err))\n  \n  const userPostsQuery = await apolloClient.query({\n      query: LIST_OF_POSTS,\n      variables: {id_list: userQuery.data.findUser.posts.map(p => p._id)}\n  }).catch(err => console.log(err))\n\n  return {\n    props: {\n      user: userQuery.data.findUser,\n      userPosts: userPostsQuery.data.getListOfPosts\n    }\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    alertNotif: state.alertNotif,\n    currentUser: state.currentUser\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch),\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(UserPage)\n\n// uses formContainer.css"]},"metadata":{},"sourceType":"module"}