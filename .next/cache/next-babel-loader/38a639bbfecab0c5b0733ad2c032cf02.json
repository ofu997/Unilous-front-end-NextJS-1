{"ast":null,"code":"var _jsxFileName = \"/home/oliver/Documents/projects/UnilousFE/components/text-field/SkillSugg.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SKILL_SEARCH } from '../../schemas/queries';\nimport Loading from '../Loading';\n\nconst SkillSugg = props => {\n  _s();\n\n  const splitQuery = props.query.toLowerCase().split(' ');\n  const lastWord = splitQuery.slice(-1) === '' ? splitQuery.slice(-2, -1)[0] : splitQuery.slice(-1)[0];\n  const {\n    0: skills,\n    1: setSkills\n  } = useState([]);\n  const skillSearchQuery = useQuery(SKILL_SEARCH, {\n    variables: {\n      filter: lastWord\n    }\n  });\n\n  const skillConditions = (query, reducer) => {\n    if (!query) return null;\n    if (!query.skillSearch) return null;\n    return query.skillSearch;\n  };\n\n  const skillsList = skillConditions(skillSearchQuery.data, skills);\n  useEffect(() => {\n    if (skillsList) {\n      setSkills(skillsList);\n    }\n  }, [skillsList, skills]);\n\n  const suggestionsToShow = () => {\n    if (skills) {\n      return skills.map(s => __jsx(\"div\", {\n        onClick: () => props.onSuggestionClicked(s.name),\n        className: \"search-suggestion\",\n        key: `SS${s.name}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }\n      }, s.name));\n    }\n\n    return __jsx(\"div\", {\n      style: {\n        gridColumn: '1/3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      style: {\n        height: '5vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }\n    }), __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }\n    }));\n  };\n\n  const suggestionsStyle = skills.length !== 0 && props.query !== '' && lastWord !== '' ? {\n    display: 'block'\n  } : {\n    display: 'none'\n  };\n  return __jsx(\"div\", {\n    className: \"search-suggestions-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"search-suggestions\",\n    style: suggestionsStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, suggestionsToShow()));\n}; //const mapStateToProps = (state) => {\n//\treturn {\n//\t}\n//}\n\n\n_s(SkillSugg, \"OwCf8C9LhOy0VY1LbN3NlhgmdLI=\", false, function () {\n  return [useQuery];\n});\n\n_c = SkillSugg;\nexport default connect(null)(SkillSugg);\n\nvar _c;\n\n$RefreshReg$(_c, \"SkillSugg\");","map":{"version":3,"sources":["/home/oliver/Documents/projects/UnilousFE/components/text-field/SkillSugg.js"],"names":["React","useState","useEffect","connect","useQuery","SKILL_SEARCH","Loading","SkillSugg","props","splitQuery","query","toLowerCase","split","lastWord","slice","skills","setSkills","skillSearchQuery","variables","filter","skillConditions","reducer","skillSearch","skillsList","data","suggestionsToShow","map","s","onSuggestionClicked","name","gridColumn","height","suggestionsStyle","length","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport { SKILL_SEARCH } from '../../schemas/queries'\r\nimport Loading from '../Loading'\r\n\r\nconst SkillSugg = (props) => {\r\n    const splitQuery = props.query.toLowerCase().split(' ')\r\n    const lastWord = splitQuery.slice(-1) === '' ? splitQuery.slice(-2, -1)[0] : splitQuery.slice(-1)[0]\r\n    const [skills, setSkills] = useState([])\r\n    const skillSearchQuery = useQuery(SKILL_SEARCH, {\r\n        variables: {filter: lastWord}\r\n    })\r\n    const skillConditions = (query, reducer) => {\r\n        if (!query) return null\r\n        if (!query.skillSearch) return null\r\n        return query.skillSearch\r\n    }\r\n\r\n    const skillsList = skillConditions(skillSearchQuery.data, skills)\r\n    useEffect(() => {\r\n        if (skillsList) {\r\n            setSkills(skillsList)\r\n        }\r\n    }, [skillsList, skills])\r\n\r\n    const suggestionsToShow = () => {\r\n        if (skills) {\r\n            return (\r\n                skills.map(s => \r\n                    <div onClick={() => props.onSuggestionClicked(s.name)} className=\"search-suggestion\" key={`SS${s.name}`}>{s.name}</div>\r\n                )\r\n            )\r\n        }\r\n        return (\r\n            <div style={{gridColumn: '1/3'}}>\r\n                <div style={{height: '5vh'}}/>\r\n                <Loading />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const suggestionsStyle = skills.length !== 0 && props.query !== '' && lastWord !== '' ? {display: 'block'} : {display: 'none'}\r\n\r\n    return (\r\n        <div className=\"search-suggestions-container\">\r\n            <div className=\"search-suggestions\" style={suggestionsStyle}>\r\n                {suggestionsToShow()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//const mapStateToProps = (state) => {\r\n//\treturn {\r\n        \r\n//\t}\r\n//}\r\nexport default connect(\r\n    null\r\n)(SkillSugg)"]},"metadata":{},"sourceType":"module"}