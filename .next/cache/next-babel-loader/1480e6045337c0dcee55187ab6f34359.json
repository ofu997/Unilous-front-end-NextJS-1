{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _jsxFileName = \"/home/oliver/Documents/projects/UnilousFE/pages/index2.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nimport Head from 'next/head';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Layout from '../components/Layout';\nimport Loading from '../components/Loading';\nimport PostImages from '../components/postPage/PostImages';\nimport PostLinks from '../components/postPage/PostLinks';\nimport PostQandA from '../components/postPage/PostQandA';\nimport FormContainer from '../components/text-field/FormContainer';\nimport InputHeader from '../components/text-field/InputHeader';\nimport { apolloClient } from '../lib/apollo';\nimport { resetAlert, setAlert } from '../redux/reducers/alertNotif';\nimport { setCurrentUserSP } from '../redux/reducers/currentUser';\nimport { setToken } from '../redux/reducers/token';\nimport { palletteGenerator, triggerAlert, useField } from '../src/functions/functions';\nimport { ASK_QUESTION, MAKE_NOTIFICATION, SAVE_POST } from '../src/schemas/mutations';\nimport { FIND_POST, Q_AND_A_NOTIFS } from '../src/schemas/queries';\nimport ppStyle from '../styles/pages/newPostPage.module.css';\nconst PostPage = withRouter(_c = _s(props => {\n  _s();\n\n  const {\n    0: currentPost,\n    1: setCurrentPost\n  } = useState(props.post);\n  const {\n    0: skillExpanded,\n    1: setSkillExpanded\n  } = useState(null);\n  const question = useField('text');\n  const message = useField('text');\n\n  const onJoinError = e => {\n    if (e.message.includes('is longer than the maximum allowed length')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const onQuestionError = e => {\n    if (e.message.includes('is longer than the maximum allowed length')) {\n      triggerAlert('warning', `question$: question of ${question.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const onFollowError = e => {\n    console.log(e);\n  };\n\n  const [followMutation] = useMutation(SAVE_POST, {\n    onError: onFollowError\n  });\n  const [makeNotification] = useMutation(MAKE_NOTIFICATION, {\n    onError: onJoinError\n  });\n  const [askQuestion] = useMutation(ASK_QUESTION, {\n    onError: onQuestionError\n  });\n\n  const handleFollow = async () => {\n    if (!props.token) {\n      triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert);\n    }\n\n    const result = await followMutation({\n      variables: {\n        user: props.currentUser._id,\n        postId: currentPost._id\n      }\n    });\n\n    if (result) {\n      props.setCurrentUserSP(props.currentUser.savedPosts.concat(currentPost));\n      triggerAlert('success', 'followed$: you are now following this post', props.setAlert, props.resetAlert);\n    }\n  };\n\n  const qandaQuery = useQuery(Q_AND_A_NOTIFS, {\n    variables: {\n      title: decodeURIComponent(props.postTitle)\n    }\n  }); // const postQuery = useQuery(FIND_POST, {\n  //     variables: {title: decodeURIComponent(props.postTitle)}\n  // })\n\n  const qandaChangeConditions = () => {\n    const query = qandaQuery.data;\n    const reducer = currentPost;\n    if (!query) return null;\n    if (!query.searchAnsweredQToPost) return null;\n    if (!reducer) return null;\n    if (reducer.qanda) return null;\n    return query.searchAnsweredQToPost;\n  }; // const postChangeConditions = () => {\n  //     const query = postQuery.data\n  //     const reducer = currentPost\n  //     if (!query) return null\n  //     if (!query.findPost) return null\n  //     if (reducer) {\n  //         if (reducer.title === query.findPost.title) return null\n  //     }\n  //     return query.findPost\n  // }\n\n\n  const qanda = qandaChangeConditions(); // const post = postChangeConditions()\n\n  useEffect(() => {\n    if (qanda) {\n      setCurrentPost(_objectSpread(_objectSpread({}, currentPost), {}, {\n        qanda\n      }));\n    } // if (post) {\n    //     setCurrentPost(post)\n    // }\n\n  }, [qanda, setCurrentPost, currentPost]);\n\n  if (!currentPost) {\n    return __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 16\n      }\n    });\n  }\n\n  let cleanedTime = new Date(Number(currentPost.time));\n  cleanedTime = cleanedTime.toString().split(' '); // cleanedTime = cleanedTime.slice(1,4).join(' ') + ' ' + cleanedTime[4].split(':').slice(0,2).join(':')\n\n  cleanedTime = cleanedTime.slice(1, 3).join(' ') + ', ' + cleanedTime[3];\n  let qandaList = currentPost.qanda ? currentPost.qanda.map(i => __jsx(PostQandA, {\n    qanda: i,\n    key: `QandA${i.question}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 68\n    }\n  })) : __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 122\n    }\n  });\n  qandaList = qandaList.length ? qandaList : __jsx(\"div\", {\n    className: ppStyle.qandaText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 48\n    }\n  }, \"no question and answer pairs yet\");\n  const skillsHTML = [];\n  const questionStyle = skillExpanded ? {\n    display: 'none'\n  } : {\n    display: 'block'\n  };\n\n  const handleNotification = async proposedContribution => {\n    if (!props.currentUser) {\n      triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await makeNotification({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentPost.user._id,\n        message: message.fields.value,\n        postId: currentPost._id,\n        proposedContribution\n      }\n    });\n\n    if (result) {\n      setSkillExpanded(null);\n      message.reset();\n      triggerAlert('success', `sent$: (check your answered notifications for the response) request has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  for (const ins in currentPost.skillNames) {\n    const skillName = currentPost.skillNames[ins];\n    const skillFill = currentPost.skillFills[ins];\n    const skillCap = currentPost.skillCapacities[ins];\n    const messageStyle = skillExpanded === skillName ? {\n      display: 'block'\n    } : {\n      display: 'none'\n    };\n    const buttonToShown = skillExpanded === skillName ? __jsx(\"h4\", {\n      onClick: () => setSkillExpanded(null),\n      className: ppStyle.PPSButtonExit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, \"X\") : skillFill < skillCap ? __jsx(\"h4\", {\n      onClick: () => setSkillExpanded(skillName),\n      className: ppStyle.PPSButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, \"join\") : __jsx(\"h4\", {\n      className: ppStyle.PPSButtonDisabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, \"join\");\n    const skillProposition = Array(currentPost.skillNames.length).fill(0);\n    skillProposition[ins] = 1;\n    skillsHTML.push(__jsx(\"div\", {\n      className: ppStyle.PPSSkill,\n      key: `PPSS${skillName}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: ppStyle.PPSDivision,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }), __jsx(\"p\", {\n      className: ppStyle.PPSSkillName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, skillName), __jsx(\"div\", {\n      className: ppStyle.PPSSkillSecondary,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      className: ppStyle.PPSSkillInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }\n    }, skillFill, \"/\", skillCap), buttonToShown), __jsx(\"div\", {\n      className: ppStyle.PPSSkillForm,\n      style: messageStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: ppStyle.PPSTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    }, __jsx(InputHeader, {\n      inputFor: \"PPS-message\",\n      info: false,\n      title: \"message\",\n      color: \"white\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 25\n      }\n    })), __jsx(\"div\", {\n      className: ppStyle.PPSInputContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 21\n      }\n    }, __jsx(\"textarea\", _extends({\n      className: ppStyle.PPSInput,\n      id: \"PPS-message\"\n    }, message.fields, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 25\n      }\n    }))), __jsx(\"div\", {\n      className: ppStyle.PPCSubmitContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, __jsx(\"h4\", {\n      onClick: () => handleNotification(skillProposition),\n      className: ppStyle.PPSBButton,\n      style: {\n        borderColor: currentPost.color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 26\n      }\n    }, \"join\")))));\n  }\n\n  const handleQuestion = async () => {\n    if (!props.currentUser) {\n      triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    if (!question.fields.value.length) {\n      triggerAlert('warning', `question$: question field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await askQuestion({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentPost.user._id,\n        postId: currentPost._id,\n        question: question.fields.value\n      }\n    });\n\n    if (result) {\n      question.reset();\n      triggerAlert('success', `sent$: (check your answered notifications for the response) question has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const pallette = palletteGenerator(currentPost.color).colorPallette;\n  const teamHTML = currentPost.team ? currentPost.team.map(un => __jsx(Link, {\n    href: \"/user/username\",\n    as: `/user/${un}`,\n    key: `PT${un}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    className: `${ppStyle.PPCUserContainer} neutralize-link`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    className: ppStyle.PPCUserIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }), __jsx(\"p\", {\n    className: \"NM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }, un)))) : null;\n\n  const HomeContent = () => {\n    return __jsx(\"div\", {\n      className: ppStyle.homeOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, __jsx(Link, {\n      href: \"/results/[searchQuery]\",\n      as: \"/results/all\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      className: `${ppStyle.homeOption} neutralize-link`,\n      style: {\n        backgroundColor: '#282828'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: \"/svg/searchWW.svg\",\n      className: ppStyle.homeOptionIcon,\n      alt: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }), __jsx(\"h3\", {\n      className: ppStyle.homeOptionText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 25\n      }\n    }, \"browse all\"))), __jsx(Link, {\n      href: \"/postformpage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, __jsx(\"a\", {\n      className: `${ppStyle.homeOption} neutralize-link`,\n      style: {\n        backgroundColor: 'rgb(52,166,95)'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: \"/svg/plusW.svg\",\n      className: ppStyle.homeOptionIcon,\n      alt: \"add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 25\n      }\n    }), __jsx(\"h3\", {\n      className: ppStyle.homeOptionText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 25\n      }\n    }, \"add project\"))), __jsx(\"a\", {\n      href: \"https://discord.gg/v7vFc9U\",\n      className: `${ppStyle.homeOption} ${ppStyle.homeOptionHighlight} neutralize-link`,\n      style: {\n        backgroundColor: '#7289DA'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 17\n      }\n    }, __jsx(\"img\", {\n      src: \"/svg/websites/discord.svg\",\n      className: ppStyle.homeOptionIcon,\n      alt: \"Discord\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 21\n      }\n    }), __jsx(\"h3\", {\n      className: ppStyle.homeOptionText,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 21\n      }\n    }, \"community discord\")));\n  };\n\n  const ModifiedDescription = () => {\n    const spacedDis = currentPost.description.split(' ');\n\n    for (const i in spacedDis) {\n      if (spacedDis[i].includes('https://')) {\n        spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\">${spacedDis[i]}</a>`;\n      }\n\n      if (spacedDis[i].includes('http://')) {\n        spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\">${spacedDis[i]}</a>`;\n      }\n    }\n\n    const finalDis = spacedDis.join(' ');\n    return __jsx(\"p\", {\n      className: ppStyle.PPCDescription,\n      dangerouslySetInnerHTML: {\n        __html: finalDis\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 16\n      }\n    });\n  };\n\n  const skillCap = currentPost.skillCapacities.reduce((n, t) => t + n, 0);\n  const skillFill = currentPost.skillFills.reduce((n, t) => t + n, 0);\n\n  const titleKeywords = () => {\n    let title = currentPost.title;\n    title = title.split(' ');\n    let keywords = title.map(w => {\n      if (w.slice(0, 1).toUpperCase() === w.slice(0, 1) && w.slice(0, 1).toLowerCase() === w.slice(0, 1)) return null;\n      if (w.slice(0, 1).toUpperCase() === w.slice(0, 1)) return w + ',';\n      return null;\n    });\n    keywords = keywords.length ? keywords.join(' ') : title[0] + ', ';\n    return keywords;\n  }; // <Helmet>\n  //     <title>{currentPost.title}</title>\n  //     <meta name=\"author\" content={currentPost.user.username} />\n  //     <meta name=\"description\" content={`Join the project, be part of \"${currentPost.title}\" team! So far ${skillFill} awesome people have joined, there are only ${skillCap - skillFill} slots left.`} />\n  //     <meta name=\"keywords\" content={`${titleKeywords()} build, team`} />\n  // </Helmet>\n\n\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      padding: 10,\n      backgroundColor: '#555d50'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: \"/svg/logo/logoW.svg\",\n    alt: \"icon\",\n    height: \"50px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 11\n    }\n  }), __jsx(\"select\", {\n    style: {\n      color: 'gray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 11\n    }\n  }, __jsx(\"option\", {\n    style: {\n      color: 'white'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \"Option\"))), __jsx(\"div\", {\n    style: {\n      height: \"25%\",\n      backgroundColor: '#282828',\n      verticalAlign: 'top',\n      marginTop: -25\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, \" hello \")), __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 17\n    }\n  }, \"Unilous\"), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.imgur.com/d6bsnRx.png\",\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"Looking to join or make a team, Unilous will help you make it happen! Join our skilled community of people looking to make something great.\",\n    key: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }\n  }), __jsx(\"meta\", {\n    name: \"google-site-verification\",\n    content: \"-ccdPuW0WxjjhXsjDgnfbYeolghrlU6r3MLjOdWKpCw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: \"navbar-height\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    className: ppStyle.postPageContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: ppStyle.PPContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }\n  }, __jsx(HomeContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 21\n    }\n  }), __jsx(\"h2\", {\n    className: ppStyle.PPCTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 21\n    }\n  }, currentPost.title), __jsx(\"div\", {\n    className: ppStyle.PPCSubHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 21\n    }\n  }, __jsx(Link, {\n    href: \"/user/[username]\",\n    as: `/user/${encodeURIComponent(currentPost.user.username)}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 25\n    }\n  }, __jsx(\"a\", {\n    className: `${ppStyle.PPCUserContainer} neutralize-link`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 29\n    }\n  }, __jsx(\"img\", {\n    className: ppStyle.PPCUserIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 33\n    }\n  }), __jsx(\"p\", {\n    className: \"NM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 33\n    }\n  }, currentPost.user.username))), __jsx(\"p\", {\n    className: ppStyle.PPCTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 25\n    }\n  }, cleanedTime)), __jsx(ModifiedDescription, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 21\n    }\n  }), __jsx(PostImages, {\n    imageLinks: currentPost.imageLinks,\n    color: currentPost.color,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 21\n    }\n  }), __jsx(PostLinks, {\n    referenceLinks: currentPost.referenceLinks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 21\n    }\n  }), __jsx(\"h3\", {\n    className: ppStyle.PPCTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 21\n    }\n  }, \"Q and A\"), __jsx(\"div\", {\n    className: ppStyle.PPCAllQandaContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 21\n    }\n  }, qandaList), __jsx(\"h3\", {\n    className: ppStyle.PPCTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, \"team\"), __jsx(\"div\", {\n    className: ppStyle.teamInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 21\n    }\n  }, teamHTML.length, \" team members\"), __jsx(\"div\", {\n    className: ppStyle.PPCTeamContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 21\n    }\n  }, teamHTML)), __jsx(FormContainer, {\n    pallette: pallette,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }, __jsx(\"div\", {\n    className: ppStyle.PPSFollowHeader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    onClick: () => handleFollow(),\n    className: ppStyle.PPSFollowHeader,\n    style: {\n      borderTop: '2px solid currentPost.color'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 25\n    }\n  }, __jsx(\"svg\", {\n    className: ppStyle.PPCUserIcon,\n    fill: currentPost.color,\n    viewBox: \"0 -28 512.00002 512\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 29\n    }\n  }, __jsx(\"path\", {\n    d: \"m471.382812 44.578125c-26.503906-28.746094-62.871093-44.578125-102.410156-44.578125-29.554687 0-56.621094 9.34375-80.449218 27.769531-12.023438 9.300781-22.917969 20.679688-32.523438 33.960938-9.601562-13.277344-20.5-24.660157-32.527344-33.960938-23.824218-18.425781-50.890625-27.769531-80.445312-27.769531-39.539063 0-75.910156 15.832031-102.414063 44.578125-26.1875 28.410156-40.613281 67.222656-40.613281 109.292969 0 43.300781 16.136719 82.9375 50.78125 124.742187 30.992188 37.394531 75.535156 75.355469 127.117188 119.3125 17.613281 15.011719 37.578124 32.027344 58.308593 50.152344 5.476563 4.796875 12.503907 7.4375 19.792969 7.4375 7.285156 0 14.316406-2.640625 19.785156-7.429687 20.730469-18.128907 40.707032-35.152344 58.328125-50.171876 51.574219-43.949218 96.117188-81.90625 127.109375-119.304687 34.644532-41.800781 50.777344-81.4375 50.777344-124.742187 0-42.066407-14.425781-80.878907-40.617188-109.289063zm0 0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 156\n    }\n  })), __jsx(\"p\", {\n    className: \"NM\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 29\n    }\n  }, \"follow\"))), skillsHTML, __jsx(\"div\", {\n    style: questionStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 21\n    }\n  }, __jsx(\"div\", {\n    className: ppStyle.PPSDivision,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    className: ppStyle.PPSTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 25\n    }\n  }, __jsx(InputHeader, {\n    inputFor: \"PPS-question\",\n    info: true,\n    title: \"question\",\n    color: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 29\n    }\n  }, __jsx(\"ul\", {\n    style: {\n      margin: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 33\n    }\n  }, __jsx(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 37\n    }\n  }, \"if answered it will be shown on post\")))), __jsx(\"div\", {\n    className: ppStyle.PPSInputContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 25\n    }\n  }, __jsx(\"textarea\", _extends({\n    className: ppStyle.PPSInput,\n    id: \"PPS-question\"\n  }, question.fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 29\n    }\n  }))), __jsx(\"div\", {\n    className: ppStyle.PPCSubmitContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 25\n    }\n  }, __jsx(\"h4\", {\n    onClick: () => handleQuestion(),\n    className: ppStyle.PPSButton,\n    style: {\n      borderColor: currentPost.color\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 29\n    }\n  }, \"ask\")))))));\n}, \"S3s5oOxrJU7wGRSX7F0X2HwXHtA=\", false, function () {\n  return [useField, useField, useMutation, useMutation, useMutation, useQuery];\n})); // const mapStateToProps = (state) => {\n// \treturn {\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps, \n//     { setAlert, resetAlert, setCurrentUserSP }\n// )(PostPage)\n\n_c2 = PostPage;\n\nPostPage.getInitialProps = async () => {\n  const postQuery = await apolloClient.query({\n    query: FIND_POST,\n    variables: {\n      title: 'Unilous'\n    }\n  }).catch(err => console.log(err));\n  console.log(postQuery);\n  return {\n    post: postQuery.data.findPost\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentUser: state.currentUser,\n    token: state.token,\n    alertNotif: state.alertNotif\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch),\n    setToken: bindActionCreators(setToken, dispatch),\n    setCurrentUserSP: bindActionCreators(setCurrentUserSP, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostPage$withRouter\");\n$RefreshReg$(_c2, \"PostPage\");","map":{"version":3,"sources":["/home/oliver/Documents/projects/UnilousFE/pages/index2.js"],"names":["useMutation","useQuery","Head","Link","withRouter","React","useEffect","useState","connect","bindActionCreators","Layout","Loading","PostImages","PostLinks","PostQandA","FormContainer","InputHeader","apolloClient","resetAlert","setAlert","setCurrentUserSP","setToken","palletteGenerator","triggerAlert","useField","ASK_QUESTION","MAKE_NOTIFICATION","SAVE_POST","FIND_POST","Q_AND_A_NOTIFS","ppStyle","PostPage","props","currentPost","setCurrentPost","post","skillExpanded","setSkillExpanded","question","message","onJoinError","e","includes","fields","value","length","onQuestionError","onFollowError","console","log","followMutation","onError","makeNotification","askQuestion","handleFollow","token","result","variables","user","currentUser","_id","postId","savedPosts","concat","qandaQuery","title","decodeURIComponent","postTitle","qandaChangeConditions","query","data","reducer","searchAnsweredQToPost","qanda","cleanedTime","Date","Number","time","toString","split","slice","join","qandaList","map","i","qandaText","skillsHTML","questionStyle","display","handleNotification","proposedContribution","userFromId","userToId","reset","username","ins","skillNames","skillName","skillFill","skillFills","skillCap","skillCapacities","messageStyle","buttonToShown","PPSButtonExit","PPSButton","PPSButtonDisabled","skillProposition","Array","fill","push","PPSSkill","PPSDivision","PPSSkillName","PPSSkillSecondary","PPSSkillInfo","PPSSkillForm","PPSTitle","PPSInputContainer","PPSInput","PPCSubmitContainer","PPSBButton","borderColor","color","handleQuestion","pallette","colorPallette","teamHTML","team","un","PPCUserContainer","PPCUserIcon","HomeContent","homeOptions","homeOption","backgroundColor","homeOptionIcon","homeOptionText","homeOptionHighlight","ModifiedDescription","spacedDis","description","finalDis","PPCDescription","__html","reduce","n","t","titleKeywords","keywords","w","toUpperCase","toLowerCase","alignItems","justifyContent","padding","height","verticalAlign","marginTop","postPageContainer","PPContent","PPCTitle","PPCSubHeader","encodeURIComponent","PPCTime","imageLinks","referenceLinks","PPCAllQandaContainer","teamInfo","PPCTeamContainer","PPSFollowHeader","borderTop","margin","getInitialProps","postQuery","catch","err","findPost","mapStateToProps","state","alertNotif","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { useMutation, useQuery } from '@apollo/react-hooks'\nimport Head from 'next/head'\nimport Link from 'next/link'\nimport { withRouter } from 'next/router'\nimport React, { useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport Layout from '../components/Layout'\nimport Loading from '../components/Loading'\nimport PostImages from '../components/postPage/PostImages'\nimport PostLinks from '../components/postPage/PostLinks'\nimport PostQandA from '../components/postPage/PostQandA'\nimport FormContainer from '../components/text-field/FormContainer'\nimport InputHeader from '../components/text-field/InputHeader'\nimport { apolloClient } from '../lib/apollo'\nimport { resetAlert, setAlert } from '../redux/reducers/alertNotif'\nimport { setCurrentUserSP } from '../redux/reducers/currentUser'\nimport { setToken } from '../redux/reducers/token'\nimport { palletteGenerator, triggerAlert, useField } from '../src/functions/functions'\nimport { ASK_QUESTION, MAKE_NOTIFICATION, SAVE_POST } from '../src/schemas/mutations'\nimport { FIND_POST, Q_AND_A_NOTIFS } from '../src/schemas/queries'\nimport ppStyle from '../styles/pages/newPostPage.module.css'\n\nconst PostPage = withRouter((props) => {\n    const [currentPost, setCurrentPost] = useState(props.post)\n    const [skillExpanded, setSkillExpanded] = useState(null)\n    const question = useField('text')\n    const message = useField('text')\n    const onJoinError = (e) => {\n        if (e.message.includes('is longer than the maximum allowed length')) {\n            triggerAlert('warning', `message$: message of ${message.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert)\n        }\n    }\n    const onQuestionError = (e) => {\n        if (e.message.includes('is longer than the maximum allowed length')) {\n            triggerAlert('warning', `question$: question of ${question.fields.value.length} characters exceeded the maximum of 800 characters.`, props.setAlert, props.resetAlert)\n        }\n    }\n    const onFollowError = (e) => {\n        console.log(e)\n    }\n\n    const [followMutation] = useMutation(SAVE_POST, {\n        onError: onFollowError\n    })\n    const [makeNotification] = useMutation(MAKE_NOTIFICATION, {\n        onError: onJoinError\n    })\n    const [askQuestion] = useMutation(ASK_QUESTION, {\n        onError: onQuestionError\n    })\n\n    const handleFollow = async () => {\n        if (!props.token) {\n            triggerAlert('warning', 'sign in$: must be signed in to perform this action', props.setAlert, props.resetAlert)\n        }\n        const result = await followMutation({\n            variables: {\n                user: props.currentUser._id,\n                postId: currentPost._id\n            }\n        })\n\n        if (result) {\n            props.setCurrentUserSP(props.currentUser.savedPosts.concat(currentPost))\n            triggerAlert('success', 'followed$: you are now following this post', props.setAlert, props.resetAlert)\n        }\n    }\n    \n    const qandaQuery = useQuery(Q_AND_A_NOTIFS, {\n        variables: {title: decodeURIComponent(props.postTitle)}\n    })\n    // const postQuery = useQuery(FIND_POST, {\n    //     variables: {title: decodeURIComponent(props.postTitle)}\n    // })\n    const qandaChangeConditions = () => {\n        const query = qandaQuery.data\n        const reducer = currentPost\n        if (!query) return null\n        if (!query.searchAnsweredQToPost) return null\n        if (!reducer) return null\n        if (reducer.qanda) return null\n        return query.searchAnsweredQToPost\n    }\n    // const postChangeConditions = () => {\n    //     const query = postQuery.data\n    //     const reducer = currentPost\n    //     if (!query) return null\n    //     if (!query.findPost) return null\n    //     if (reducer) {\n    //         if (reducer.title === query.findPost.title) return null\n    //     }\n    //     return query.findPost\n    // }\n    const qanda = qandaChangeConditions()\n    // const post = postChangeConditions()\n    useEffect(() => {\n        if (qanda) {\n            setCurrentPost({...currentPost, qanda})\n        }\n        // if (post) {\n        //     setCurrentPost(post)\n        // }\n    }, [qanda, setCurrentPost, currentPost])\n    if (!currentPost) {\n        return <Loading />\n    }\n\n    let cleanedTime = new Date(Number(currentPost.time))\n    cleanedTime = cleanedTime.toString().split(' ')\n    // cleanedTime = cleanedTime.slice(1,4).join(' ') + ' ' + cleanedTime[4].split(':').slice(0,2).join(':')\n    cleanedTime = cleanedTime.slice(1,3).join(' ') + ', ' + cleanedTime[3]\n\n    let qandaList = currentPost.qanda ? currentPost.qanda.map(i => <PostQandA qanda={i} key={`QandA${i.question}`} />) : <Loading />\n    qandaList = qandaList.length ? qandaList : <div className={ppStyle.qandaText}>no question and answer pairs yet</div>\n    const skillsHTML = []\n    const questionStyle = skillExpanded ? {display: 'none'} : {display: 'block'}\n    const handleNotification = async (proposedContribution) => {\n        if (!props.currentUser) {\n            triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (!message.fields.value.length) {\n            triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\n            return null\n        }\n        const result = await makeNotification({\n            variables: {\n                userFromId: props.currentUser._id,\n                userToId: currentPost.user._id,\n                message: message.fields.value,\n                postId: currentPost._id,\n                proposedContribution\n            }\n        })\n        if (result) {\n            setSkillExpanded(null)\n            message.reset()\n            triggerAlert('success', `sent$: (check your answered notifications for the response) request has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert)\n        }\n    }\n    for (const ins in currentPost.skillNames) {\n        const skillName = currentPost.skillNames[ins]\n        const skillFill = currentPost.skillFills[ins]\n        const skillCap = currentPost.skillCapacities[ins]\n        const messageStyle = skillExpanded === skillName ? {display: 'block'} : {display: 'none'}\n        const buttonToShown = skillExpanded === skillName ?\n            <h4 onClick={() => setSkillExpanded(null)} className={ppStyle.PPSButtonExit}>X</h4>\n            :\n            skillFill < skillCap ?\n                <h4 onClick={() => setSkillExpanded(skillName)} className={ppStyle.PPSButton}>join</h4>\n                :\n                <h4 className={ppStyle.PPSButtonDisabled}>join</h4>\n\n        const skillProposition = Array(currentPost.skillNames.length).fill(0)\n        skillProposition[ins] = 1\n        skillsHTML.push( \n            <div className={ppStyle.PPSSkill} key={`PPSS${skillName}`}>\n                <div className={ppStyle.PPSDivision} />\n                <p className={ppStyle.PPSSkillName}>{skillName}</p>\n                <div className={ppStyle.PPSSkillSecondary}>\n                    <p className={ppStyle.PPSSkillInfo}>{skillFill}/{skillCap}</p>\n                    {buttonToShown}\n                </div>\n                <div className={ppStyle.PPSSkillForm} style={messageStyle}>\n                    <div className={ppStyle.PPSTitle}>\n                        <InputHeader inputFor=\"PPS-message\" info={false} title=\"message\" color=\"white\" />\n                    </div>\n                    <div className={ppStyle.PPSInputContainer}>\n                        <textarea className={ppStyle.PPSInput} id=\"PPS-message\" {...message.fields}></textarea>\n                    </div>\n                    <div className={ppStyle.PPCSubmitContainer}>\n                        {<h4 onClick={() => handleNotification(skillProposition)} className={ppStyle.PPSBButton} style={{borderColor: currentPost.color}}>join</h4>}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    const handleQuestion = async () => {\n        if (!props.currentUser) {\n            triggerAlert('warning', `sign in$: must be signed in to perform this action`, props.setAlert, props.resetAlert)\n            return null\n        }\n        if (!question.fields.value.length) {\n            triggerAlert('warning', `question$: question field is required`, props.setAlert, props.resetAlert)\n            return null\n        }\n        const result = await askQuestion({\n            variables: {\n                userFromId: props.currentUser._id,\n                userToId: currentPost.user._id,\n                postId: currentPost._id,\n                question: question.fields.value\n            }\n        })\n        if (result) {\n            question.reset()\n            triggerAlert('success', `sent$: (check your answered notifications for the response) question has been sent to ${currentPost.user.username}`, props.setAlert, props.resetAlert)\n        }\n    }\n    const pallette = palletteGenerator(currentPost.color).colorPallette\n\n    const teamHTML = currentPost.team ? currentPost.team.map(un =>\n        <Link href=\"/user/username\" as={`/user/${un}`} key={`PT${un}`}>\n            <a className={`${ppStyle.PPCUserContainer} neutralize-link`}>\n                <img className={ppStyle.PPCUserIcon} src='/svg/userB.svg' alt=\"user\" />\n                <p className=\"NM\">{un}</p>\n            </a>\n        </Link>\n        \n    ): null\n\n    const HomeContent = () => {\n        return (\n            <div className={ppStyle.homeOptions}>\n                <Link href=\"/results/[searchQuery]\" as=\"/results/all\">\n                    <a className={`${ppStyle.homeOption} neutralize-link`} style={{backgroundColor: '#282828'}}>\n                        <img src='/svg/searchWW.svg' className={ppStyle.homeOptionIcon} alt=\"search\" />\n                        <h3 className={ppStyle.homeOptionText}>browse all</h3>\n                    </a>\n                </Link>\n                <Link href=\"/postformpage\">\n                    <a className={`${ppStyle.homeOption} neutralize-link`} style={{backgroundColor: 'rgb(52,166,95)'}}>\n                        <img src='/svg/plusW.svg' className={ppStyle.homeOptionIcon} alt=\"add\" />\n                        <h3 className={ppStyle.homeOptionText}>add project</h3>\n                    </a>\n                </Link>\n                <a href=\"https://discord.gg/v7vFc9U\" className={`${ppStyle.homeOption} ${ppStyle.homeOptionHighlight} neutralize-link`} style={{backgroundColor: '#7289DA'}}>\n                    <img src='/svg/websites/discord.svg' className={ppStyle.homeOptionIcon} alt=\"Discord\" />\n                    <h3 className={ppStyle.homeOptionText}>community discord</h3>\n                </a>\n            </div>\n        )\n    }\n\n    const ModifiedDescription = () => {\n        const spacedDis = currentPost.description.split(' ')\n        for (const i in spacedDis) {\n            if (spacedDis[i].includes('https://')) {\n                spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\">${spacedDis[i]}</a>`\n            }\n            if (spacedDis[i].includes('http://')) {\n                spacedDis[i] = `<a href=\"${spacedDis[i]}\" class=\"p-link neutralize-link\">${spacedDis[i]}</a>`\n            }\n        }\n        const finalDis = spacedDis.join(' ')\n        return <p className={ppStyle.PPCDescription} dangerouslySetInnerHTML={{__html: finalDis}} />\n    }\n    const skillCap = currentPost.skillCapacities.reduce((n, t) => t + n, 0)\n    const skillFill = currentPost.skillFills.reduce((n, t) => t + n, 0)\n    const titleKeywords = () => {\n        let title = currentPost.title\n        title = title.split(' ')\n        let keywords = title.map(w => {\n            if (w.slice(0, 1).toUpperCase() === w.slice(0, 1) && w.slice(0, 1).toLowerCase() === w.slice(0, 1)) return null\n            if (w.slice(0, 1).toUpperCase() === w.slice(0, 1)) return w + ','\n            return null\n        })\n        keywords = keywords.length ? keywords.join(' ') : title[0] + ', '\n        \n        return keywords\n    }\n    \n    // <Helmet>\n    //     <title>{currentPost.title}</title>\n    //     <meta name=\"author\" content={currentPost.user.username} />\n    //     <meta name=\"description\" content={`Join the project, be part of \"${currentPost.title}\" team! So far ${skillFill} awesome people have joined, there are only ${skillCap - skillFill} slots left.`} />\n    //     <meta name=\"keywords\" content={`${titleKeywords()} build, team`} />\n    // </Helmet>\n    return (\n        <>\n        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', padding: 10, backgroundColor: '#555d50' }}>\n          <img src='/svg/logo/logoW.svg' alt='icon' height='50px'></img>\n          <select style={{ color: 'gray' }}>\n            <option style={{ color: 'white' }}>Option</option>\n          </select>\n        </div>\n        <div style={{ height: \"25%\", backgroundColor: '#282828', verticalAlign: 'top', marginTop: -25 }}>\n          <p> hello </p>\n        </div>\n        {/* unchanged below */}\n        <Layout>\n            <Head>\n                <title>Unilous</title>\n                <meta property=\"og:image\" content=\"https://i.imgur.com/d6bsnRx.png\" key=\"title\" />\n                <meta name=\"description\" content=\"Looking to join or make a team, Unilous will help you make it happen! Join our skilled community of people looking to make something great.\" key=\"description\"/>\n                <meta name=\"google-site-verification\" content=\"-ccdPuW0WxjjhXsjDgnfbYeolghrlU6r3MLjOdWKpCw\" />\n            </Head>\n            <div className=\"navbar-height\" />\n            <div className={ppStyle.postPageContainer}>\n                <div className={ppStyle.PPContent}>\n                    <HomeContent />\n                    <h2 className={ppStyle.PPCTitle}>{currentPost.title}</h2>\n                    <div className={ppStyle.PPCSubHeader}>\n                        <Link href=\"/user/[username]\" as={`/user/${encodeURIComponent(currentPost.user.username)}`} >\n                            <a className={`${ppStyle.PPCUserContainer} neutralize-link`}>\n                                <img className={ppStyle.PPCUserIcon} src='/svg/userB.svg' alt=\"user\" />\n                                <p className=\"NM\">{currentPost.user.username}</p>\n                            </a>\n                        </Link>\n                        <p className={ppStyle.PPCTime}>{cleanedTime}</p>\n                    </div>\n                    <ModifiedDescription />\n                    <PostImages imageLinks={currentPost.imageLinks} color={currentPost.color} />\n                    <PostLinks referenceLinks={currentPost.referenceLinks} />\n                    <h3 className={ppStyle.PPCTitle}>Q and A</h3>\n                    <div className={ppStyle.PPCAllQandaContainer}>\n                        {qandaList}\n                    </div>\n                    <h3 className={ppStyle.PPCTitle}>team</h3>\n                    <div className={ppStyle.teamInfo}>{teamHTML.length} team members</div>\n                    <div className={ppStyle.PPCTeamContainer}>\n                        {teamHTML}\n                    </div>\n                </div>\n                <FormContainer pallette={pallette}>\n                    <div  className={ppStyle.PPSFollowHeader} >\n                        <div onClick={() => handleFollow()} className={ppStyle.PPSFollowHeader} style={{borderTop: '2px solid currentPost.color'}}>\n                            <svg className={ppStyle.PPCUserIcon} fill={currentPost.color} viewBox=\"0 -28 512.00002 512\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m471.382812 44.578125c-26.503906-28.746094-62.871093-44.578125-102.410156-44.578125-29.554687 0-56.621094 9.34375-80.449218 27.769531-12.023438 9.300781-22.917969 20.679688-32.523438 33.960938-9.601562-13.277344-20.5-24.660157-32.527344-33.960938-23.824218-18.425781-50.890625-27.769531-80.445312-27.769531-39.539063 0-75.910156 15.832031-102.414063 44.578125-26.1875 28.410156-40.613281 67.222656-40.613281 109.292969 0 43.300781 16.136719 82.9375 50.78125 124.742187 30.992188 37.394531 75.535156 75.355469 127.117188 119.3125 17.613281 15.011719 37.578124 32.027344 58.308593 50.152344 5.476563 4.796875 12.503907 7.4375 19.792969 7.4375 7.285156 0 14.316406-2.640625 19.785156-7.429687 20.730469-18.128907 40.707032-35.152344 58.328125-50.171876 51.574219-43.949218 96.117188-81.90625 127.109375-119.304687 34.644532-41.800781 50.777344-81.4375 50.777344-124.742187 0-42.066407-14.425781-80.878907-40.617188-109.289063zm0 0\"/></svg>\n                            <p className=\"NM\">follow</p>\n                        </div>\n                    </div>\n                    {skillsHTML}\n                    <div style={questionStyle}>\n                        <div className={ppStyle.PPSDivision} />\n                        <div className={ppStyle.PPSTitle}>\n                            <InputHeader inputFor=\"PPS-question\" info={true} title=\"question\" color=\"white\" >\n                                <ul style={{margin: 0}}>\n                                    <li>if answered it will be shown on post</li>\n                                </ul>\n                            </InputHeader>\n                        </div>\n                        <div className={ppStyle.PPSInputContainer}>\n                            <textarea className={ppStyle.PPSInput} id=\"PPS-question\" {...question.fields}></textarea>\n                        </div>\n                        <div className={ppStyle.PPCSubmitContainer}>\n                            <h4 onClick={() => handleQuestion()} className={ppStyle.PPSButton} style={{borderColor: currentPost.color}}>ask</h4>\n                        </div>\n                    </div>\n                </FormContainer>\n            </div>\n        </Layout>\n        </>\n    )\n})\n\n// const mapStateToProps = (state) => {\n// \treturn {\n//         currentUser: state.currentUser,\n//         token: state.token\n// \t}\n// }\n// export default connect(\n//     mapStateToProps, \n//     { setAlert, resetAlert, setCurrentUserSP }\n// )(PostPage)\n\nPostPage.getInitialProps = async () => {\n    const postQuery = await apolloClient.query({\n        query: FIND_POST,\n        variables: {title: 'Unilous'} \n    }).catch(err => console.log(err))\n    console.log(postQuery)\n    return {\n        post: postQuery.data.findPost,\n    }\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n        currentUser: state.currentUser,\n        token: state.token,\n        alertNotif: state.alertNotif,\n\t}\n}\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setAlert: bindActionCreators(setAlert, dispatch),\n        resetAlert: bindActionCreators(resetAlert, dispatch),\n        setToken: bindActionCreators(setToken, dispatch),\n        setCurrentUserSP: bindActionCreators(setCurrentUserSP, dispatch)\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PostPage)"]},"metadata":{},"sourceType":"module"}