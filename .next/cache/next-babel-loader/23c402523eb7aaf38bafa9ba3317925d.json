{"ast":null,"code":"var _jsxFileName = \"/home/oliver/Documents/projects/UnilousFE/pages/user/[username].js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { MAKE_NOTIFICATION } from '../../src/schemas/mutations';\nimport { FIND_USER, ALL_USERS, FIND_POST } from '../../src/schemas/queries';\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif';\nimport UP from '../../styles/pages/userPage.module.css';\nimport PostSmallList from '../../components/post/PostSmallList';\nimport Loading from '../../components/Loading';\nimport FormContainer from '../../components/text-field/FormContainer';\nimport ReferenceLink from '../../components/text-field/ReferenceLink';\nimport { palletteGenerator, useField, triggerAlert } from '../../src/functions/functions';\nimport { bindActionCreators } from 'redux';\nimport { apolloClient } from '../../lib/apollo';\nimport { withRouter } from 'next/router';\nimport Link from 'next/link';\nimport Layout from '../../components/Layout';\nimport Head from 'next/head';\nconst UserPage = withRouter(props => {\n  const currentUser = props.user;\n  const message = useField('text');\n\n  const onError = e => {\n    const eMessage = e.message;\n\n    if (eMessage.includes('Path `message` (')) {\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\n    onError\n  });\n\n  const handleMessage = async () => {\n    if (!message.fields.value.length) {\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert);\n      return null;\n    }\n\n    const result = await sendMessage({\n      variables: {\n        userFromId: props.currentUser._id,\n        userToId: currentUser._id,\n        message: message.fields.value\n      }\n    });\n\n    if (result) {\n      message.reset();\n      triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert);\n    }\n  };\n\n  const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette; // console.log('props.currentUser', props.currentUser); \n  // console.log(typeof props.currentUser)\n  // console.log('props.currentUser.username: ' + props.currentUser.username)\n  // console.log('page username: ' + currentUser.username)\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, `${currentUser.username} | Unilous user`), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://i.imgur.com/6z9eNzV.png\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${currentUser.username} | Unilous user`,\n    key: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${currentUser.username} has ${currentUser.posts.length} projects in need of a team team.`,\n    key: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${currentUser.username} has ${currentUser.posts.length} projects in need of a team team.`,\n    key: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: UP.UPContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"navbar-height\",\n    style: {\n      gridColumn: '1/3'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: UP.UPContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: UP.UPTitleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, __jsx(\"img\", {\n    className: UP.UPTitleIcon,\n    src: \"/svg/userB.svg\",\n    alt: \"user\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, currentUser.username)), __jsx(\"h3\", {\n    className: UP.UPTitle,\n    style: {\n      opacity: '0.8'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }, \"profile link\"), __jsx(ReferenceLink, {\n    rl: currentUser.referenceLink,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }), __jsx(\"h2\", {\n    className: UP.UPTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }, \"posts\"), __jsx(\"div\", {\n    className: UP.UPPostsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, __jsx(PostSmallList, {\n    posts: currentUser.posts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }))), props.currentUser !== currentUser.username && __jsx(FormContainer, {\n    pallette: pallette,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"form-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, \"contact \", currentUser.username), __jsx(\"h4\", {\n    className: \"form-title-secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 15\n    }\n  }, \"message\"), __jsx(\"div\", {\n    className: \"form-field-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(\"textarea\", _extends({\n    className: \"form-field\"\n  }, message.fields, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }))), __jsx(\"div\", {\n    className: \"form-submit-button-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, __jsx(\"h4\", {\n    onClick: () => handleMessage(),\n    className: \"form-submit-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"send\")))));\n});\nexport async function getStaticPaths() {\n  const usernamesQuery = await apolloClient.query({\n    query: ALL_USERS\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n  const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  const userQuery = await apolloClient.query({\n    query: FIND_USER,\n    variables: {\n      username: params.username\n    }\n  }).catch(err => console.log(err));\n  return {\n    props: {\n      user: userQuery.data.findUser\n    }\n  };\n}\n\nconst mapStateToProps = state => {\n  return {\n    alertNotif: state.alertNotif,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setAlert: bindActionCreators(setAlert, dispatch),\n    resetAlert: bindActionCreators(resetAlert, dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage); // uses formContainer.css","map":{"version":3,"sources":["/home/oliver/Documents/projects/UnilousFE/pages/user/[username].js"],"names":["React","useState","useEffect","connect","useQuery","useMutation","MAKE_NOTIFICATION","FIND_USER","ALL_USERS","FIND_POST","setAlert","resetAlert","UP","PostSmallList","Loading","FormContainer","ReferenceLink","palletteGenerator","useField","triggerAlert","bindActionCreators","apolloClient","withRouter","Link","Layout","Head","UserPage","props","currentUser","user","message","onError","e","eMessage","includes","fields","value","length","sendMessage","handleMessage","result","variables","userFromId","_id","userToId","reset","username","pallette","colorPallette","posts","UPContainer","gridColumn","UPContent","UPTitleContainer","UPTitleIcon","UPTitle","opacity","referenceLink","UPPostsContainer","getStaticPaths","usernamesQuery","query","then","res","catch","err","console","log","paths","data","allUsers","map","u","encodeURIComponent","fallback","getStaticProps","params","userQuery","findUser","mapStateToProps","state","alertNotif","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { useQuery, useMutation } from '@apollo/react-hooks'\r\nimport { MAKE_NOTIFICATION } from '../../src/schemas/mutations'\r\nimport { FIND_USER, ALL_USERS, FIND_POST } from '../../src/schemas/queries'\r\nimport { setAlert, resetAlert } from '../../redux/reducers/alertNotif'\r\nimport UP from '../../styles/pages/userPage.module.css';\r\nimport PostSmallList from '../../components/post/PostSmallList'\r\nimport Loading from '../../components/Loading'\r\nimport FormContainer from '../../components/text-field/FormContainer'\r\nimport ReferenceLink from '../../components/text-field/ReferenceLink'\r\nimport { palletteGenerator, useField, triggerAlert } from '../../src/functions/functions'\r\nimport {bindActionCreators} from 'redux'\r\nimport {apolloClient} from '../../lib/apollo'\r\nimport {withRouter} from 'next/router'\r\nimport Link from 'next/link'\r\nimport Layout from '../../components/Layout'\r\nimport Head from 'next/head'\r\n\r\nconst UserPage = withRouter((props) => {\r\n  const currentUser = props.user\r\n  const message = useField('text')\r\n  const onError = (e) => {\r\n    const eMessage = e.message\r\n    if (eMessage.includes('Path `message` (')) {\r\n      triggerAlert('warning', `message$: message of ${message.fields.value.length} characters cannot be more than 800 characters`, props.setAlert, props.resetAlert)\r\n    }\r\n  }\r\n  const [sendMessage] = useMutation(MAKE_NOTIFICATION, {\r\n    onError\r\n  })\r\n  const handleMessage = async () => {\r\n    if (!message.fields.value.length) {\r\n      triggerAlert('warning', `message$: message field is required`, props.setAlert, props.resetAlert)\r\n      return null\r\n    }\r\n    const result = await sendMessage({\r\n        variables: {\r\n            userFromId: props.currentUser._id,\r\n            userToId: currentUser._id,\r\n            message: message.fields.value,\r\n        }\r\n    })\r\n    if (result) {\r\n        message.reset()\r\n        triggerAlert('success', `sent: message has been sent to ${currentUser.username}`, props.setAlert, props.resetAlert)\r\n    }\r\n  }\r\n  const pallette = palletteGenerator(\"rgb(40,40,40)\").colorPallette\r\n  // console.log('props.currentUser', props.currentUser); \r\n  // console.log(typeof props.currentUser)\r\n  // console.log('props.currentUser.username: ' + props.currentUser.username)\r\n  // console.log('page username: ' + currentUser.username)\r\n  return (\r\n    <Layout>\r\n      <Head>\r\n        <title>{`${currentUser.username} | Unilous user`}</title>\r\n        <meta property=\"og:image\" content=\"https://i.imgur.com/6z9eNzV.png\" />\r\n        <meta property=\"og:title\" content={`${currentUser.username} | Unilous user`} key=\"title\" />\r\n        <meta name=\"description\" content={`${currentUser.username} has ${currentUser.posts.length} projects in need of a team team.`} key=\"description\" />\r\n        <meta property=\"og:description\" content={`${currentUser.username} has ${currentUser.posts.length} projects in need of a team team.`} key=\"description\" />\r\n      </Head>\r\n      <div className={UP.UPContainer}>\r\n        <div className=\"navbar-height\" style={{gridColumn: '1/3'}} />\r\n        <div className={UP.UPContent}>\r\n          <div className={UP.UPTitleContainer}>\r\n            <img className={UP.UPTitleIcon} src=\"/svg/userB.svg\" alt=\"user\" />\r\n            <h2 className={UP.UPTitle}>{currentUser.username}</h2>\r\n          </div>\r\n          <h3 className={UP.UPTitle} style={{opacity: '0.8'}}>profile link</h3>\r\n          <ReferenceLink rl={currentUser.referenceLink} />\r\n          <h2 className={UP.UPTitle}>posts</h2>\r\n          <div className={UP.UPPostsContainer}>\r\n            <PostSmallList posts={currentUser.posts} />\r\n          </div>\r\n        </div>\r\n        { props.currentUser !== currentUser.username &&\r\n        <FormContainer pallette={pallette} >\r\n              <h3 className=\"form-title\">contact {currentUser.username}</h3>\r\n              <h4 className=\"form-title-secondary\">message</h4>\r\n              <div className=\"form-field-container\">\r\n                <textarea className=\"form-field\" {...message.fields} />\r\n              </div >\r\n              <div className=\"form-submit-button-container\">\r\n                \r\n              <h4 onClick={() => handleMessage()} className=\"form-submit-button\">send</h4>\r\n              </div>\r\n        </FormContainer>\r\n        }\r\n      </div>\r\n    </Layout>\r\n  )\r\n})\r\n\r\nexport async function getStaticPaths() {\r\n    const usernamesQuery = await apolloClient.query({query: ALL_USERS}).then((res) => {\r\n        return res\r\n    }).catch(err => console.log(err))\r\n    const paths = usernamesQuery.data.allUsers.map(u => `/user/${encodeURIComponent(u.username)}`)\r\n    return {\r\n        paths,\r\n        fallback: false\r\n    }\r\n}\r\n\r\nexport async function getStaticProps({params}) {\r\n  const userQuery = await apolloClient.query({\r\n    query: FIND_USER,\r\n    variables: {username: params.username}\r\n  }).catch(err => console.log(err))\r\n  return {\r\n    props: {\r\n      user: userQuery.data.findUser\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    alertNotif: state.alertNotif,\r\n    currentUser: state.currentUser\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setAlert: bindActionCreators(setAlert, dispatch),\r\n    resetAlert: bindActionCreators(resetAlert, dispatch),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(UserPage)\r\n\r\n// uses formContainer.css"]},"metadata":{},"sourceType":"module"}