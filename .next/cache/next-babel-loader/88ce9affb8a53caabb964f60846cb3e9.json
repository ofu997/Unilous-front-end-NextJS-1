{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\components\\\\Layout.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { setCurrentUser, setPendingNotifications, setCurrentUserNotifications } from '../redux/reducers/currentUser';\nimport { setToken } from '../redux/reducers/token';\nimport { connect } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { useQuery } from '@apollo/react-hooks';\nimport NavBar from './navBar/NavBar';\nimport { FIND_USER, PENDING_NOTIFS, LIST_OF_NOTIFICATIONS } from '../src/schemas/queries';\nimport { bindActionCreators } from 'redux';\nimport Head from 'next/head';\n\nconst Layout = props => {\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n\n  const onQueryChange = event => {\n    setQuery(event.target.value);\n  };\n\n  if (true) return __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, __jsx(NavBar, {\n    query: query,\n    onQueryChange: onQueryChange,\n    noUser: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }), props.children);else {\n    localStorage.clear();\n\n    if (localStorage.getItem('token') && props.token === null) {\n      props.setToken(localStorage.getItem('token'));\n    }\n\n    const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake';\n    const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\n      variables: {\n        userId: currentUserId\n      }\n    });\n    const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake';\n    const userQuery = useQuery(FIND_USER, {\n      variables: {\n        username: currentUserUN\n      }\n    });\n    const userNotifs = props.currentUser ? props.currentUser.notifications.map(n => n._id) : [];\n    const notifsQuery = useQuery(LIST_OF_NOTIFICATIONS, {\n      variables: {\n        notifications: userNotifs\n      }\n    });\n\n    const notifsQueryConditions = () => {\n      if (!notifsQuery.data) return null;\n      if (!props.currentUser) return null;\n      if (notifsQuery.loading) return null;\n      if (notifsQuery.data.listOfNotifications.length < 1) return null;\n      if (!props.currentUser.notifications.length) return null;\n      if (props.currentUser.notifications[0].userFrom) return null;\n      return notifsQuery.data.listOfNotifications;\n    };\n\n    const pendingNotifsConditions = () => {\n      if (!pendingNotifsQuery.data) return null;\n      if (props.currentUser && props.currentUser.pendingNotifications) return null;\n      return pendingNotifsQuery.data.searchAwaitingNotifs;\n    };\n\n    const userConditions = (query, reducer) => {\n      if (!query.data) return null;\n      if (!query.data.findUser) return null;\n      if (reducer) return null;\n      return query.data.findUser;\n    };\n\n    const notifsFilled = notifsQueryConditions();\n    const pendingNotifs = pendingNotifsConditions();\n    const user = userConditions(userQuery, props.currentUser);\n    useEffect(() => {\n      if (user) {\n        props.setCurrentUser(user);\n      }\n\n      if (pendingNotifs) {\n        props.setPendingNotifications(pendingNotifs);\n      }\n\n      if (notifsFilled) {\n        props.setCurrentUserNotifications(notifsFilled);\n      }\n    }, [notifsFilled, props.setCurrentUserNotifications, user, props.setCurrentUser, pendingNotifs, props.setPendingNotifications, props]);\n    return __jsx(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(NavBar, {\n      query: query,\n      onQueryChange: onQueryChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }), props.children);\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    token: state.token,\n    currentUser: state.currentUser\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setToken: bindActionCreators(setToken, dispatch),\n    setCurrentUser: bindActionCreators(setCurrentUser, dispatch),\n    setPendingNotifications: bindActionCreators(setPendingNotifications, dispatch),\n    setCurrentUserNotifications: bindActionCreators(setCurrentUserNotifications, dispatch)\n  };\n};\n\nsetCurrentUser;\nsetPendingNotifications;\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout);","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/components/Layout.js"],"names":["React","useState","useEffect","setCurrentUser","setPendingNotifications","setCurrentUserNotifications","setToken","connect","BrowserRouter","Router","Route","useQuery","NavBar","FIND_USER","PENDING_NOTIFS","LIST_OF_NOTIFICATIONS","bindActionCreators","Head","Layout","props","query","setQuery","onQueryChange","event","target","value","children","localStorage","clear","getItem","token","currentUserId","currentUser","_id","pendingNotifsQuery","variables","userId","currentUserUN","userQuery","username","userNotifs","notifications","map","n","notifsQuery","notifsQueryConditions","data","loading","listOfNotifications","length","userFrom","pendingNotifsConditions","pendingNotifications","searchAwaitingNotifs","userConditions","reducer","findUser","notifsFilled","pendingNotifs","user","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { setCurrentUser, setPendingNotifications, setCurrentUserNotifications } from '../redux/reducers/currentUser'\r\nimport { setToken } from '../redux/reducers/token'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { useQuery } from '@apollo/react-hooks'\r\nimport NavBar from './navBar/NavBar'\r\nimport { FIND_USER, PENDING_NOTIFS, LIST_OF_NOTIFICATIONS } from '../src/schemas/queries'\r\nimport {bindActionCreators} from 'redux'\r\nimport Head from 'next/head'\r\n\r\nconst Layout = (props) => {\r\n    const [query, setQuery] = useState('')\r\n\r\n    const onQueryChange = (event) => {\r\n    setQuery(event.target.value)\r\n    }\r\n    if (typeof window === 'undefined') return (\r\n        <div className=\"wrapper\">\r\n            <NavBar query={query} onQueryChange={onQueryChange} noUser />\r\n            {props.children}\r\n        </div>\r\n    )\r\n    else {\r\n        localStorage.clear()\r\n        if (localStorage.getItem('token') && props.token === null) {\r\n        props.setToken(localStorage.getItem('token'))\r\n        }\r\n        const currentUserId = props.currentUser ? props.currentUser._id : 'thisisfake'\r\n        const pendingNotifsQuery = useQuery(PENDING_NOTIFS, {\r\n            variables:  {userId: currentUserId}\r\n        })\r\n        const currentUserUN = localStorage.getItem('username') ? localStorage.getItem('username') : 'thisisfake'\r\n        const userQuery = useQuery(FIND_USER, {\r\n            variables: {username: currentUserUN}\r\n        })\r\n        const userNotifs = props.currentUser ? props.currentUser.notifications.map(n => n._id) : []\r\n        const notifsQuery = useQuery(LIST_OF_NOTIFICATIONS, {\r\n            variables: {notifications: userNotifs}\r\n        })\r\n        const notifsQueryConditions = () => {\r\n            if (!notifsQuery.data) return null\r\n            if (!props.currentUser) return null\r\n            if (notifsQuery.loading) return null\r\n            if (notifsQuery.data.listOfNotifications.length < 1) return null\r\n            if (!props.currentUser.notifications.length) return null\r\n            if (props.currentUser.notifications[0].userFrom) return null\r\n            return notifsQuery.data.listOfNotifications\r\n        }\r\n        const pendingNotifsConditions = () => {\r\n            if (!pendingNotifsQuery.data) return null\r\n            if (props.currentUser && props.currentUser.pendingNotifications) return null\r\n            return pendingNotifsQuery.data.searchAwaitingNotifs\r\n        }\r\n        const userConditions = (query, reducer) => {\r\n            if (!query.data) return null\r\n            if (!query.data.findUser) return null\r\n            if (reducer) return null\r\n            return query.data.findUser\r\n        }\r\n        const notifsFilled = notifsQueryConditions()\r\n        const pendingNotifs = pendingNotifsConditions()\r\n        const user = userConditions(userQuery, props.currentUser)\r\n        useEffect(() => {\r\n            if (user) {\r\n                props.setCurrentUser(user)\r\n            }\r\n            if (pendingNotifs) {\r\n                props.setPendingNotifications(pendingNotifs)\r\n            }\r\n            if (notifsFilled) {\r\n                props.setCurrentUserNotifications(notifsFilled)\r\n            }\r\n        }, [notifsFilled, props.setCurrentUserNotifications, user, props.setCurrentUser, pendingNotifs, props.setPendingNotifications, props])\r\n    \r\n        return (\r\n            <div className=\"wrapper\">\r\n                <NavBar query={query} onQueryChange={onQueryChange} />\r\n                {props.children}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n        token: state.token,\r\n        currentUser: state.currentUser\r\n\t}\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setToken: bindActionCreators(setToken, dispatch),\r\n        setCurrentUser: bindActionCreators(setCurrentUser, dispatch),\r\n        setPendingNotifications: bindActionCreators(setPendingNotifications, dispatch),\r\n        setCurrentUserNotifications: bindActionCreators(setCurrentUserNotifications, dispatch),\r\n    }\r\n}\r\nsetCurrentUser\r\nsetPendingNotifications\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Layout)"]},"metadata":{},"sourceType":"module"}