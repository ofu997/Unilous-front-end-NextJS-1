{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\Projects\\\\projectU\\\\projectu\\\\components\\\\UploadImage.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport IU from '../styles/imageUpload.module.css';\n\nconst UploadImage = props => {\n  _s();\n\n  let fileInput = React.createRef();\n  const {\n    0: imageURL,\n    1: setImageURL\n  } = useState(null);\n  const {\n    0: imageFile,\n    1: setImageFile\n  } = useState(null);\n\n  const uploadToImgur = file => {\n    const onImageSuccess = link => {\n      setImageURL(link);\n    };\n\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'json';\n    xhr.open('POST', 'https://api.imgur.com/3/image');\n    xhr.setRequestHeader('Authorization', \"Client-ID cc972a94b762b77\");\n    xhr.setRequestHeader('Content-Type', 'multipart/form-data;');\n\n    xhr.onload = function () {\n      var response = xhr.response;\n\n      if (response.success) {\n        var link = response.data.link;\n        console.log(link);\n        onImageSuccess(link);\n      } else {\n        alert('please enter an image in .jpg / .png / .gif format.');\n      }\n    };\n\n    xhr.send(file);\n  };\n\n  const showImageOrGuide = imageFile ? __jsx(\"label\", {\n    for: \"fileInput\",\n    className: IU.imageLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(\"img\", {\n    src: URL.createObjectURL(imageFile),\n    className: IU.imageInContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  })) : __jsx(\"label\", {\n    for: \"fileInput\",\n    className: IU.imageLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: IU.labelItemsContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    src: \"/svg/imageUploadB.svg\",\n    className: IU.imageIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"select or drop image\")));\n  const showSetButton = imageFile ? __jsx(\"button\", {\n    onClick: () => uploadToImgur(fileInput.current.files[0]),\n    className: IU.submitButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, \"set\") : null;\n  return __jsx(\"div\", {\n    className: IU.imageUploadContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, showImageOrGuide, __jsx(\"input\", {\n    id: \"fileInput\",\n    type: \"file\",\n    ref: fileInput,\n    accept: \".jpg,.png,.gif\",\n    className: IU.imageInput,\n    onChange: () => setImageFile(fileInput.current.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), showSetButton);\n}; //const mapStateToProps = (state) => {\n//\treturn {\n//\t}\n//}\n\n\n_s(UploadImage, \"N9pTOUtspxLPmuCIkxpTrGWGPbM=\");\n\n_c = UploadImage;\nexport default connect(null)(UploadImage);\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"sources":["C:/Code/Projects/projectU/projectu/components/UploadImage.js"],"names":["React","useState","connect","IU","UploadImage","props","fileInput","createRef","imageURL","setImageURL","imageFile","setImageFile","uploadToImgur","file","onImageSuccess","link","xhr","XMLHttpRequest","responseType","open","setRequestHeader","onload","response","success","data","console","log","alert","send","showImageOrGuide","imageLabel","URL","createObjectURL","imageInContainer","labelItemsContainer","imageIcon","showSetButton","current","files","submitButton","imageUploadContainer","imageInput"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport { connect } from 'react-redux'\r\nimport IU from '../styles/imageUpload.module.css'\r\n\r\nconst UploadImage = (props) => {\r\n    let fileInput = React.createRef()\r\n    const [imageURL, setImageURL] = useState(null)\r\n    const [imageFile, setImageFile] = useState(null)\r\n\r\n    const uploadToImgur = (file) => {\r\n        const onImageSuccess = (link) => {\r\n            setImageURL(link)\r\n        }\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.responseType = 'json';\r\n        xhr.open('POST', 'https://api.imgur.com/3/image');\r\n        xhr.setRequestHeader('Authorization', \"Client-ID cc972a94b762b77\");\r\n        xhr.setRequestHeader('Content-Type', 'multipart/form-data;');\r\n        xhr.onload = function() {\r\n            var response = xhr.response\r\n            if (response.success) {\r\n                var link = response.data.link;\r\n                console.log(link)\r\n                onImageSuccess(link)\r\n            }\r\n            else {\r\n                alert('please enter an image in .jpg / .png / .gif format.')\r\n            }\r\n        }\r\n        xhr.send(file);\r\n    }\r\n    const showImageOrGuide = imageFile ?\r\n        <label for=\"fileInput\" className={IU.imageLabel}>\r\n            <img src={URL.createObjectURL(imageFile)} className={IU.imageInContainer} />\r\n        </label>\r\n        :\r\n        <label for=\"fileInput\" className={IU.imageLabel}>\r\n            <div className={IU.labelItemsContainer}>\r\n                <img src=\"/svg/imageUploadB.svg\" className={IU.imageIcon} />\r\n                <h2>select or drop image</h2>\r\n            </div>\r\n        </label>\r\n    const showSetButton = imageFile ? \r\n        <button onClick={() => uploadToImgur(fileInput.current.files[0])} className={IU.submitButton}>set</button> : null\r\n    \r\n    return (\r\n        <div className={IU.imageUploadContainer}>\r\n            {showImageOrGuide}\r\n            <input id=\"fileInput\" type=\"file\" ref={fileInput} accept=\".jpg,.png,.gif\" className={IU.imageInput} onChange={() => setImageFile(fileInput.current.files[0])} />\r\n            {showSetButton}\r\n        </div>\r\n    )\r\n}\r\n\r\n//const mapStateToProps = (state) => {\r\n//\treturn {\r\n        \r\n//\t}\r\n//}\r\nexport default connect(\r\n    null\r\n)(UploadImage)"]},"metadata":{},"sourceType":"module"}